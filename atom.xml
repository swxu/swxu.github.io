<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shengwei&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swxu.github.io/"/>
  <updated>2020-07-08T02:22:21.528Z</updated>
  <id>http://swxu.github.io/</id>
  
  <author>
    <name>Shengwei Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH连接Linux后出现ascii异常问题</title>
    <link href="http://swxu.github.io/2020/07/08/SSH%E8%BF%9E%E6%8E%A5Linux%E5%90%8E%E5%87%BA%E7%8E%B0ascii%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    <id>http://swxu.github.io/2020/07/08/SSH%E8%BF%9E%E6%8E%A5Linux%E5%90%8E%E5%87%BA%E7%8E%B0ascii%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-08T01:59:58.000Z</published>
    <updated>2020-07-08T02:22:21.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Mac 通过 SSH 连接 Linux 服务器，尝试开启服务器上 Python3.6 的 web 服务的时候，服务发生无法解码的异常。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: <span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> decode byte <span class="number">0</span>xe5 <span class="keyword">in</span> position <span class="number">443</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>令人费解的是，别人跟我运行相同命令是 ok 的。:(</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>首先搜一波资料，看了这篇 <a href="https://blog.csdn.net/j___t/article/details/97705231" target="_blank" rel="noopener">帖子</a>，了解了大概是关于 <code>locale</code> 的问题。</p><p>按照帖子中的方法设置了 <code>export PYTHONIOENCODING=utf-8</code>，然而还是没有效果，<code>sys.stdout.encoding</code> 依然输出 <code>ANSI_X3.4-1968</code>。而且服务器并不缺语言包。</p><p>接着搜索，看了这篇 <a href="https://stackoverflow.com/questions/35502328/unicodeencodeerror-on-linux-but-not-on-windows" target="_blank" rel="noopener">StackOverflow 的帖子</a>，通过 <code>locale</code> 和 <code>locale -a</code> 命令检查了服务器的配置都没有问题，很是纳闷。</p><p>执行 <code>locale</code> 命令的时候出现一行 <code>Cannot set LC_CTYPE to default locale: No such file or directory</code>，再次搜索这行报错，发现了这篇 <a href="https://askubuntu.com/questions/599808/cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory/778672#778672" target="_blank" rel="noopener">帖子</a>，帖子中第二高赞的回答中，提到了 <strong>Mac 通过 SSH 连接 Linux 服务器的时候，iTerm/Terminal 会自动设置环境变量，在终端的设置中取消自动设置即可</strong>。尝试了一下，果然有效。:P</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>上面的解决方法可能导致 Mac 本地终端字符解码出现问题，可以检查 Mac 的 <code>locale</code> 环境变量有没有设置为 <code>utf-8</code>，这里就不赘述了。</p><blockquote><p>参考资料<br><a href="https://blog.csdn.net/j___t/article/details/97705231" target="_blank" rel="noopener">https://blog.csdn.net/j___t/article/details/97705231</a><br><a href="https://stackoverflow.com/questions/35502328/unicodeencodeerror-on-linux-but-not-on-windows" target="_blank" rel="noopener">https://stackoverflow.com/questions/35502328/unicodeencodeerror-on-linux-but-not-on-windows</a><br><a href="https://askubuntu.com/questions/599808/cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory/778672#778672" target="_blank" rel="noopener">https://askubuntu.com/questions/599808/cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory/778672#778672</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Mac 通过 SSH 连接 Linux 服务器，尝试开启服务器上 Python3.6 的 web 服务的时候，服务发生无法解码的异常。&lt;/p
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://swxu.github.io/categories/Tools/"/>
    
    
      <category term="SSH" scheme="http://swxu.github.io/tags/SSH/"/>
    
      <category term="Terminal" scheme="http://swxu.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>职场沟通之沟通目标及常见误区漫谈</title>
    <link href="http://swxu.github.io/2020/06/28/%E8%81%8C%E5%9C%BA%E6%B2%9F%E9%80%9A%E4%B9%8B%E6%B2%9F%E9%80%9A%E7%9B%AE%E6%A0%87%E5%8F%8A%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA%E6%BC%AB%E8%B0%88/"/>
    <id>http://swxu.github.io/2020/06/28/%E8%81%8C%E5%9C%BA%E6%B2%9F%E9%80%9A%E4%B9%8B%E6%B2%9F%E9%80%9A%E7%9B%AE%E6%A0%87%E5%8F%8A%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA%E6%BC%AB%E8%B0%88/</id>
    <published>2020-06-28T03:28:56.000Z</published>
    <updated>2020-06-28T11:31:22.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录曹大 caoz 2020 年中分享 – 职场沟通之沟通目标及常见误区漫谈</p></blockquote><h2 id="基于同理心，确定沟通目标"><a href="#基于同理心，确定沟通目标" class="headerlink" title="基于同理心，确定沟通目标"></a>基于同理心，确定沟通目标</h2><p>所有的沟通，表达，最核心的不是你表达了什么，而是对方接受了多少。所以，<strong>请务必记住你沟通的目标</strong>。</p><p>那么，沟通目标，我分为三个层次，需要渐进前进。</p><p>第一，对方能否明白你的意图。第一层目标，是能清晰明了的表达你的诉求和目标，让对方能够完全明白你所表达的是什么。</p><p>第二，对方是否信任你的陈述。第二层目标，是能够让对方相信你所表达的诉求，其背景信息资料是可信任的，可被证明的。当你面对陌生人进行沟通的时候，需要做一定的自我证明。</p><p>第三，对方能否达成你的意图。第三层目标，也就是真正的目标，是对方能够接受你的建议和诉求，从而实现你的沟通目标，那你说，我只记得这个目标就行了，但你要达到这个目标，应该首先完成前两个阶段目标，并且，在这个阶段，这需要对方能知道，你的诉求和目标，对对方而言，价值和利益在哪里。</p><p>再次强调，让对方达成你的意图，一定要找到对方的价值点和利益点，而不只是你的价值点和利益点。</p><h2 id="沟通的常见误区"><a href="#沟通的常见误区" class="headerlink" title="沟通的常见误区"></a>沟通的常见误区</h2><p>沟通，最大的忌讳是沉浸于自我表达。忽略对方的接受程度。</p><h3 id="问题零，强调自己的正确"><a href="#问题零，强调自己的正确" class="headerlink" title="问题零，强调自己的正确"></a>问题零，强调自己的正确</h3><p>这里我必须强调一句，沟通的目的是让对方达成你的诉求，而不是证明你的正确，这是很多人在沟通过程中最常见的错误，不要作杠精，不要为了证明自己正确而忽略了真正的诉求和目标。</p><p>比如一个客户，不专业，不认可你的产品介绍，你无论如何强调自己的产品观多么正确，都无法打动对方，你应该先聆听对方的真实诉求，然后顺应他的诉求寻找产品亮点。当我们面对不专业的领导，不专业的客户，不专业的合作伙伴，强调自己正确不会帮你达成目标，只会让你更加远离目标，先彻底理清对方的逻辑和诉求，基于对方的理解和目标，去推进自己的诉求。</p><h3 id="问题一，缺乏背景铺垫，缺乏关键目标"><a href="#问题一，缺乏背景铺垫，缺乏关键目标" class="headerlink" title="问题一，缺乏背景铺垫，缺乏关键目标"></a>问题一，缺乏背景铺垫，缺乏关键目标</h3><p>背景信息包括：人物背景，诸如我是谁，相关负责人是谁；项目背景，这是一个什么项目，是谁负责的项目；相关行业知识背景，某些简称和缩略语，面向非同行业人士沟通时，应解释清楚；其他背景，诸如事件的起因，或者决策的关键逻辑等等。</p><p>关键目标也很重要，一个沟通诉求的最终目标是什么，很多时候人们往往忽视了这一点。</p><p>典型案例，我需要数据部门加急给我做一份xxx的数据。对方的疑惑，你是谁？我们很忙，你这个事情有什么意义？你又不是我的上司，我凭什么给你做事？</p><p>正确表达：我是市场部门助理谁谁谁，昨天总监会上，我们部门总监与技术总监达成一致，尽快评估上次市场活动的效果，并基于此决定下一期的活动规划和预算，由此，烦请配合，加急提供一份xxx数据，相关信息任务已经汇报给有关部门负责人，如有更多疑问，可以随时联系我的微信xxx.</p><p>把背景信息和目标信息补全，别人才知道为什么这件事需要紧急处理。</p><p>典型案例，请在某某业务展示页面，提供相关推荐功能。对方的疑惑，推荐的目标是什么？是追求点击率，还是追求商业转化效率，还是挖掘优质原创，缺乏关键目标，做出来的东西就很可能南辕北辙。</p><p>职场沟通的时候，不要认为我知道的你也知道，不要认为背景信息所有人都了解，不要认为别人和你的知识体系及逻辑体系一致。该补充的要补充，该说明的要说明。</p><h3 id="问题二，缺乏可信性评估和证明"><a href="#问题二，缺乏可信性评估和证明" class="headerlink" title="问题二，缺乏可信性评估和证明"></a>问题二，缺乏可信性评估和证明</h3><p>社群里大量帖子，我有什么什么产品，我有什么什么资源，需要什么什么资源合作。对方的疑惑，很多骗子都这么说，我怎么知道你说的是不是真的，空手套白狼的还不够多么？这还算好的，很多直接扔一句，我需要什么资源，谁有的请联系我。你谁啊，你干嘛的啊。</p><p>正确表达：我的资源，可以参见xxx榜单，xxx淘宝店铺销量，xxx的粉丝数，以及媒体报道xxx，目前需要什么什么资源合作。所有你提供的背景资料，均属于公开信息，可以查验。</p><p>信任成本很高的，越是掌握优质资源的人，越看中信用关系，当你希望与掌握优质资源的人建立深度联系的时候你必须明白自己应该先证明自己的信用。</p><h3 id="问题三，缺乏目标激励"><a href="#问题三，缺乏目标激励" class="headerlink" title="问题三，缺乏目标激励"></a>问题三，缺乏目标激励</h3><p>你的沟通目标，是希望获得别人的资源，别人的帮助，那么问题来了，别人凭什么给你资源，或者凭什么帮助你，对别人而言，利益是什么。</p><p>典型案例，我是个大学生，我学习很勤奋，我对创业很有兴趣，我很仰慕曹老师，经常拜读您的大作，我希望得到您的指导和帮助。</p><p>你仰慕我我就要帮助你？我凭什么呢。再说，很多这样的，说很仰慕我，很客气，我后台一查，一次赞赏都没有，也没有加入知识星球，两句便宜话就把我套住，我就这么贱么。</p><p>你的沟通诉求，对别人来说，利益点和价值点在哪里，这是很重要的，特别是一些合作诉求，很多时候，不是说一定要利益等价交换，但你只说自己需要别人的帮助，却没有任何对别人帮助回馈的表达，你指望满大街的活雷锋？</p><h3 id="问题四，沉浸于自high，无法自拔"><a href="#问题四，沉浸于自high，无法自拔" class="headerlink" title="问题四，沉浸于自high，无法自拔"></a>问题四，沉浸于自high，无法自拔</h3><p>典型案例，合作邮件或者应聘邮件，大量篇幅描述自己的心路历程，介绍自己多么优秀，多么努力，多么不容易。其实很多都是多余的。当然，你说有些场合需要吹牛逼，这也能理解，适可而止。</p><h3 id="问题五，主次不分，啰哩啰嗦"><a href="#问题五，主次不分，啰哩啰嗦" class="headerlink" title="问题五，主次不分，啰哩啰嗦"></a>问题五，主次不分，啰哩啰嗦</h3><p>沟通也要抓大放小，你的核心目标是什么，你的次要目标是什么，你优先希望达成的诉求是什么，什么是锦上添花的东西。</p><p>沟通的目标，一定要记住，要分清主次，要理解优先级。有的没的罗嗦一大堆，恨不得一次搞定所有事情，一点点来，之前也提过，信任是需要一定基础的。如果不是特别熟或者特别信任，可以从简单的开始合作，一点点建立信任基础。</p><h3 id="问题六，缺乏必要的尊重"><a href="#问题六，缺乏必要的尊重" class="headerlink" title="问题六，缺乏必要的尊重"></a>问题六，缺乏必要的尊重</h3><p>尊重包括如下：</p><p>称谓上的尊重。</p><p>请求语气，劳烦，有劳，麻烦您，望不吝赐教。</p><p>恰当的文字感谢，感谢各位的参与，抱歉耽误您的时间。</p><p>行动举止上的礼让，比如，不要抢话，尊重别人的发言，不要不耐烦，保持距离，不要口沫横飞，沟通时注意坐姿，以及眼神交流。</p><p>说一些典型缺乏尊重的案例：</p><p>1、后台留言，管我叫小编，真的不合适。<br>2、自来熟，没见过两三次，好像很熟，各种随便，甚至上来勾肩搭背，抱歉，有些人不那么喜欢自来熟。<br>3、抢话，急于自我表达，缺乏倾听，沟通是相互的事情，如果姿态傲慢，或者漫不经心，就显得很没有诚意。<br>4、缺乏感谢。<br>5、很多大学生好友有互黑开玩笑的习惯，进入职场后，除非特别熟悉关系特别铁，我建议尽量不要把这种习惯带入职场。<br>6、一些商务女性，姿容娇美，习惯用撒娇作为沟通竞争力，有些企业用一些这样的女生做商务，我承认在有些场合很管用，但我强调一下，不是每个场合都适用，遇到不管用的场合，请适可而止，不要不知进退。<br>7、分场合的建议和批评，比如有些你认为对方不合适的事情，很多情况下，可能私下沟通比较好，不要公开指出别人的问题和缺陷。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>沟通的时候，<br>第一，让对方知道你是谁，你的目标和诉求是什么；<br>第二，让对方信任你的表述；<br>第三，让对方愿意接受你的建议，达成你的诉求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录曹大 caoz 2020 年中分享 – 职场沟通之沟通目标及常见误区漫谈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基于同理心，确定沟通目标&quot;&gt;&lt;a href=&quot;#基于同理心，确定沟通目标&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Daily" scheme="http://swxu.github.io/categories/Daily/"/>
    
    
      <category term="职场" scheme="http://swxu.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HashMap面试知识点总结</title>
    <link href="http://swxu.github.io/2020/05/08/HashMap%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://swxu.github.io/2020/05/08/HashMap%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-08T06:20:31.000Z</published>
    <updated>2020-05-28T06:07:51.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HashMap 的相关问题在校招面试中十分常见, 作为新人, HashMap 的各个问题应该要理解的十分透彻才行. 此外, ConcurrentHashMap, Hashtable 也是经常与 HashMap 一同被问, 下文中都有介绍.</p><h2 id="HashMap-原理"><a href="#HashMap-原理" class="headerlink" title="HashMap 原理"></a>HashMap 原理</h2><h3 id="1-底层数据结构"><a href="#1-底层数据结构" class="headerlink" title="1. 底层数据结构"></a>1. 底层数据结构</h3><p>HashMap 在 JDK1.8 之前底层使用的是数组+链表的拉链式结构; 在 JDK1.8 之后引入了红黑树, 当链表长度大于阈值的时候就会将这个链表转化为红黑树. </p><h3 id="2-JDK1-8-中-HashMap-的改动"><a href="#2-JDK1-8-中-HashMap-的改动" class="headerlink" title="2. JDK1.8 中 HashMap 的改动"></a>2. JDK1.8 中 HashMap 的改动</h3><p>如上面所说, JDK1.8 中对 HashMap 做了一些改动, 在 JDK1.8 之前链表的插入使用的是头插法, 作者认为刚刚插入的数据被查询的可能性比较大, 头插法在多线程 resize 的时候可能会产生循环链表. JDK1.8 之后改为了尾插法, 在扩容的时候会保持链表元素原本的顺序, 避免了链表成环的问题, 但是改完以后 HashMap 依然不能支持并发场景. (不过 HashMap 本来也不是为多线程而生的呀)</p><h3 id="3-链表和红黑树的转化"><a href="#3-链表和红黑树的转化" class="headerlink" title="3. 链表和红黑树的转化"></a>3. 链表和红黑树的转化</h3><p>当链表长度大于阈值的时候, 并且哈希桶的数量大于 64 (<code>MIN_TREEIFY_CAPACITY = 64</code>), 就会将这个链表转化为红黑树, 链表转化为红黑树的默认阈值为 8, 如果红黑树的节点个数减少到一定程度也会转化为链表, 这是出于时间和空间的折中方案, 默认会在节点个数减少到 6 的时候进行转化.</p><h3 id="4-默认红黑树转化阈值的选择"><a href="#4-默认红黑树转化阈值的选择" class="headerlink" title="4. 默认红黑树转化阈值的选择"></a>4. 默认红黑树转化阈值的选择</h3><p>上面所讲的阈值为什么选择 8 和 6 呢? 根据泊松分布, 在负载因子为 0.75 (HashMap 的默认值) 的时候, 单个 hash 槽内元素个数为 8 的概率小于百万分之一, 所以将 7 作为一个分水岭, 等于 7 的时候不进行转化, 大于等于 8 时转化为红黑树, 小于等于 6 的时候再转化为链表.</p><h3 id="5-hash值的计算"><a href="#5-hash值的计算" class="headerlink" title="5. hash值的计算"></a>5. hash值的计算</h3><p>通过阅读源码, 我们可以发现它是通过 <code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code> 来计算 hash 值, 混合了 key 哈希值的高 16 位和低 16 位.</p><h3 id="6-扩容机制"><a href="#6-扩容机制" class="headerlink" title="6. 扩容机制"></a>6. 扩容机制</h3><p>HashMap 的默认容量 (其实就是拉链式中数组的长度) 为 16, 每次扩容都会变为原来的 2 倍, 并保证容量为 2 的幂次, 如果在构造函数或者扩容的时候给定一个不是 2 的幂次的数, 它会自动向上扩展到一个 2 的幂次.</p><h3 id="7-为什么-HashMap-的容量要保证是-2-的幂次"><a href="#7-为什么-HashMap-的容量要保证是-2-的幂次" class="headerlink" title="7. 为什么 HashMap 的容量要保证是 2 的幂次?"></a>7. 为什么 HashMap 的容量要保证是 2 的幂次?</h3><ul><li>由于使用拉链式的存储方式, 当 put 一个数据的时候, 需要对数组的长度取模确定数据在数组中的位置, 取模过程相对耗时, 因此需要优化取模运算. 当数组长度为 2 的幂次的时候, <code>hash % len</code> 等价于 <code>hash &amp; (len - 1)</code>, 与运算相对取模运算更快.</li><li>在满足容量为 2 的幂次的时候, <code>(len - 1)</code> 的所有二进制位都为 1, 这种情况下, 只需要保证 hash 算法的结果是均匀分布的, 那么 HashMap 中各元素一定是均匀分布的.</li><li>HashMap 中有个字段 <code>threshold</code>, 源码注解中写着 <code>The next size value at which to resize (capacity * load factor)</code>, 表示它用来判断下次什么时候扩容的字段. 当数组发生扩容时, 只需要再比较 1 bit 即可确定这个节点是否需要移动, 要么不动, 要么移动原来的数组长度.</li></ul><h3 id="8-为什么-HashMap-的默认容量是-16-呢"><a href="#8-为什么-HashMap-的默认容量是-16-呢" class="headerlink" title="8. 为什么 HashMap 的默认容量是 16 呢?"></a>8. 为什么 HashMap 的默认容量是 16 呢?</h3><p>这应该是一个经验值, 要保证容量为 2 的幂次, 并且需要在效率和空间上做一个权衡, 太大浪费空间, 太小需要频繁扩容.</p><h2 id="HashMap-与-Hashtable-的区别"><a href="#HashMap-与-Hashtable-的区别" class="headerlink" title="HashMap 与 Hashtable 的区别"></a>HashMap 与 Hashtable 的区别</h2><table><thead><tr><th>集合</th><th>线程安全性</th><th>效率</th><th>默认容量</th><th>扩容方式</th><th>底层结构</th><th>实现方式</th><th>是否支持null值</th><th>迭代器</th></tr></thead><tbody><tr><td>HashMap</td><td>不安全</td><td>高</td><td>16</td><td>2n (保证是2的幂次)</td><td>数组+链表+红黑树</td><td>继承AbstractMap类</td><td>Key允许存在一个null, Value可以为null</td><td>Fail-fast 机制</td></tr><tr><td>Hashtable</td><td>安全</td><td>低</td><td>11</td><td>2n+1</td><td>数组+链表</td><td>继承Dictionary类</td><td>Key和Value都不能为null</td><td>Enumerator</td></tr></tbody></table><h3 id="1-线程安全性和效率"><a href="#1-线程安全性和效率" class="headerlink" title="1. 线程安全性和效率"></a>1. 线程安全性和效率</h3><p>首先 HashMap 本来就不是针对多线程情况而设计的, Hashtable 是遗留类, 它内部使用 <code>synchronzied</code> 来修饰方式, 使得它能够成为一个同步集合, 但这种方式效率比较低.</p><p>我们可以通过两种方式来获得同步的 HashMap. </p><ol><li>第一种是使用 <code>Collentions.synchronizedMap(Map&lt;K,V&gt; m)</code> 来将一个非同步 Map 变为同步 Map. 这种方式的原理比较简单, 与 Hashtable 类似, 它会把传入的 map 对象作为 mutex 互斥锁对象, 然后在方法里都加上 <code>synchronized(mutex)</code> 的同步.</li><li>第二种是使用 <code>java.util.concurrent</code> 包下的同步集合 <code>ConcurrentHashMap</code>, 这个集合将在下面详细介绍.</li></ol><h3 id="2-对于-null-的支持和迭代器的差异"><a href="#2-对于-null-的支持和迭代器的差异" class="headerlink" title="2. 对于 null 的支持和迭代器的差异"></a>2. 对于 null 的支持和迭代器的差异</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HashMap 中计算 hash 值的过程 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Hashtable 中 put 的部分源码 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先从源码上看, Hashtable 在 put 值为 null 的 key 或者 value 时候会抛出 <code>NullPointerException</code>, 但是 HashMap 对值为 null 的 key 做了特殊处理. 看似很简单的处理, 那这么处理的内在原因是什么呢?</p><p>Hashtable 的迭代器使用了安全失败机制 (fail-safe), 这种机制在遍历元素的时候, 先复制原有集合内容, 在拷贝的集合上进行遍历, 这会使得每次读取到的数据并不一定是最新数据. 如果可以使用 null 值, 将会无法判断对应的 key 是不存在还是为空. ConrrentHashMap 也是同样的道理.</p><p>HashMap 则是使用安全失败机制 (fail-fast), 这种机制是指在用迭代器遍历一个集合对象的时候, 如果遍历过程中对集合对象的内容进行了修改, 则会抛出 <code>Concurrent Modification Exception</code>. 通过阅读源码, 我们可以发现这种机制使用了 <code>modCount</code> 变量, 每次遍历下个元素的时候, 都会检查 <code>modCount</code> 变量的值是否发生改变, 如果发生改变就会抛出异常. 我们不能依赖这个异常是否抛出来进行并发控制, 这个异常只建议用于检测并发修改的 bug.</p><p><code>java.util</code> 包下的集合 (除了同步容器: Hashtable, Vector 等) 都是 fail-fast, 而 <code>java.util.concurrent</code> 包下的集合和 <code>java.util</code> 包下的同步集合都是 fail-safe.</p><h2 id="ConcurrentHashMap-与-Hashtable-的区别"><a href="#ConcurrentHashMap-与-Hashtable-的区别" class="headerlink" title="ConcurrentHashMap 与 Hashtable 的区别"></a>ConcurrentHashMap 与 Hashtable 的区别</h2><h3 id="1-底层结构"><a href="#1-底层结构" class="headerlink" title="1. 底层结构"></a>1. 底层结构</h3><p>ConcurrentHashMap 的底层结构与 HashMap 类似, 使用了数组+链表+红黑树, 而 Hashtable 使用了数组+链表.</p><h3 id="2-实现线程安全的方式"><a href="#2-实现线程安全的方式" class="headerlink" title="2. 实现线程安全的方式"></a>2. 实现线程安全的方式</h3><p>它们都是线程安全的, 但它们实现线程安全的方式不一样.</p><ul><li>Hashtable 使用同一个对象锁, 用 synchronized 来保证线程安全.<br><img src="../../../../images/2020/05/08/HashtableLock.png" alt="HashtableLock"></li><li>ConcurrentHashMap 在 JDK1.7 中使用分段锁, 对整个数组进行分割来分段, 每把锁只锁定一部分数据, 多线程可以访问不同的数据段. Segment 锁继承了 ReentrantLock, 是一种可重入锁, 获取锁时先尝试自旋获取锁, 达到最大自旋次数后改为阻塞方式获取锁, 保证能够获取成功.<br><img src="../../../../images/2020/05/08/ConcurrentHashMap1.7.png" alt="ConcurrentHashMap1.7.png"><br><img src="../../../../images/2020/05/08/ConcurrentHashMap1.7SegmentLock.png" alt="ConcurrentHashMap1.7SegmentLock.png"></li><li>ConcurrentHashMap 在 JDK1.8 中不再使用分段 (Segment) 的概念, 直接用 Node 数组+链表+红黑树来实现, 使用 CAS + synchronized 来进行并发控制. sychronized 只锁定当前链表或红黑树的头节点, 只要 hash 不冲突就不会有并发问题.<br><img src="../../../../images/2020/05/08/ConcurrentHashMap1.8Lock.png" alt="ConcurrentHashMap1.8Lock"></li></ul><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="1-HashMap-与-LinkedHashMap-的区别"><a href="#1-HashMap-与-LinkedHashMap-的区别" class="headerlink" title="1. HashMap 与 LinkedHashMap 的区别"></a>1. HashMap 与 LinkedHashMap 的区别</h3><p>LinkedHashMap 继承自 HashMap, 底层结构与 HashMap 一致, 主要区别是 LinkedHashMap 维护了一个双向链表, 记录了插入数据的顺序. LinkedHashMap 十分适合用来实现 LRU 算法, LRU 算法主要利用了双向链表和 HashMap, 这简直就是量身打造, 要是手撕代码题用 LinkedHashMap 简直是作弊, 一般面试官不会让你这么干的 :P. <a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">LeetCode 146 - LRU Cache</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRU_Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRU_Cache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置 accessOrder = true 之后每次访问元素之后都会把这个元素移动到链表最后</span></span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(capacity, <span class="number">0.75f</span>, <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123; <span class="keyword">return</span> map.getOrDefault(key, -<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123; map.put(key, value); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-HashMap-与-HashSet-的区别"><a href="#2-HashMap-与-HashSet-的区别" class="headerlink" title="2. HashMap 与 HashSet 的区别"></a>2. HashMap 与 HashSet 的区别</h3><p>阅读一下 HashSet 的源码, 我们会发现 HashSet 是基于 HashMap 来实现的, 只不过 HashMap 使用 key 来计算 hash 值, 而 HashSet 使用的是成员对象.</p><h3 id="3-同步集合线程安全问题"><a href="#3-同步集合线程安全问题" class="headerlink" title="3. 同步集合线程安全问题"></a>3. 同步集合线程安全问题</h3><p>同步集合一定是线程安全的吗? 其实同步集合只能保证单个方法操作是线程安全的, 而对这些集合的复合操作是无法保证其线程安全性, 需要主动加锁来保证线程安全. 例子如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteLastElement</span><span class="params">(Vector v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lastIdx = v.size() - <span class="number">1</span>;</span><br><span class="line">    v.remove(lastIdx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-N-个元素要加入-HashMap-初始化为多大合适"><a href="#4-N-个元素要加入-HashMap-初始化为多大合适" class="headerlink" title="4. N 个元素要加入 HashMap, 初始化为多大合适?"></a>4. N 个元素要加入 HashMap, 初始化为多大合适?</h3><p>为了避免频繁的扩容操作, 我们应该尽量一次性初始化所需要的空间. </p><p>如果负载因子为 <code>0.75</code>, 假设 <code>N = 16</code>, 由于 <code>threshold = capacity * load factor = 16 * 0.75 = 12</code>, 当加入第 12 个元素的时候, HashMap 就需要扩容了, 因此直接初始化为 32 最为合适. </p><p>从上面这个例子中可以看出规律, 我们应该直接初始化 HashMap 的容量为 <code>capacity = N / load factor</code>, 并且将 <code>capacity</code> 向上取至 2 的幂次.</p><blockquote><p>主要参考了 <a href="https://github.com/SnailClimb/JavaGuide" target="_blank" rel="noopener">JavaGuide</a> 和 <a href="https://github.com/AobingJava/JavaFamily" target="_blank" rel="noopener">敖丙</a> 的文章, 其中也有参考其他的文章, 但忘记保存链接了, 文中图片也是引用别的大佬的, 请见谅.<br>新手上路, 若有问题, 欢迎指正.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;HashMap 的相关问题在校招面试中十分常见, 作为新人, HashMap 的各个问题应该要理解的十分透彻才行. 此外, Concurre
      
    
    </summary>
    
    
      <category term="Java" scheme="http://swxu.github.io/categories/Java/"/>
    
    
      <category term="Java集合" scheme="http://swxu.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
      <category term="HashMap" scheme="http://swxu.github.io/tags/HashMap/"/>
    
      <category term="Hashtable" scheme="http://swxu.github.io/tags/Hashtable/"/>
    
      <category term="ConcurrentHashMap" scheme="http://swxu.github.io/tags/ConcurrentHashMap/"/>
    
  </entry>
  
  <entry>
    <title>在Maven项目中添加代码目录下的配置文件</title>
    <link href="http://swxu.github.io/2020/05/04/%E5%9C%A8Maven%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://swxu.github.io/2020/05/04/%E5%9C%A8Maven%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-05-04T07:59:11.000Z</published>
    <updated>2020-05-08T08:29:38.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Maven 是约定大于配置的一种工具, 通常约定在 <code>src/main/resources</code> 目录下放配置文件, 当我们想要在 <code>src/main/java</code> 代码目录下放置配置文件用来测试, Maven 项目 build 的时候并不会把代码目录下的配置文件添加到相应的位置, 可以查看 <code>target</code> 目录来证实这个情况, 最终会导致测试代码报错, 无法找到相应的配置文件.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <code>pom.xml</code> 中配置 Maven 项目 build 时所需要的资源路径并开启过滤, 样例如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;Maven 是约定大于配置的一种工具, 通常约定在 &lt;code&gt;src/main/resources&lt;/code&gt; 目录下放配置文件, 当我
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://swxu.github.io/categories/Tools/"/>
    
    
      <category term="Maven" scheme="http://swxu.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>将Github Pages博客同步到Gitee Pages</title>
    <link href="http://swxu.github.io/2020/04/22/%E5%B0%86Github-Pages%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E5%88%B0Gitee-Pages/"/>
    <id>http://swxu.github.io/2020/04/22/%E5%B0%86Github-Pages%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E5%88%B0Gitee-Pages/</id>
    <published>2020-04-22T03:10:18.000Z</published>
    <updated>2020-12-11T04:48:58.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>国内访问 Github 的速度实在太慢, 所以打算将博客同步到 Gitee. </p><p>如果还没有博客, 请参考我之前的文章 – <a href="https://swxu.github.io/2020/04/02/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/">搭建Hexo博客</a>.</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><ol><li>注册 <a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a> 账号, 建一个<strong>与用户名相同</strong>的 repo, 这里与 Github 不同, Github 是需要建一个 <code>{username}.github.io</code> 的 repo.</li><li>在 Gitee repo 服务中设置启动 Gitee Pages. 此处不需要设置什么东西, 直接开启就好.<br><img src="../../../../images/2020/04/22/GiteePages.png" alt="GiteePages"></li><li>修改博客根目录下的 <code>_config.yml</code>, 如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/shengwei-xu/shengwei-xu.github.io</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/shengwei-xu/shengwei-xu.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li>到这里就可以利用之前已经安装好的 <code>hexo-deployer-git</code> 插件来发布文章到 Github Pages 和 Gitee Pages 了.</li><li>Gitee 与 Github 有个很重要的不同点, <strong>Gitee 不免费支持推送自动部署</strong>, 要想实现 Github Pages 推送后自动部署的功能需要花钱. 如果不想花钱, 可以在上面所说的 repo 服务里的 Gitee Pages 中手动更新, 每次推送完文章来这里点一下更新就可以了.<br><img src="../../../../images/2020/04/22/GiteePagesUpdate.png" alt="GiteePagesUpdate"></li></ol><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><ul><li><a href="http://shengweixu.gitee.io/" target="_blank" rel="noopener">Gitee Pages 博客</a></li><li><a href="http://swxu.github.io/">Github Pages 博客</a></li></ul><blockquote><p><a href="https://blog.csdn.net/yakuaback/article/details/104513748" target="_blank" rel="noopener">参考文章</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;国内访问 Github 的速度实在太慢, 所以打算将博客同步到 Gitee. &lt;/p&gt;
&lt;p&gt;如果还没有博客, 请参考我之前的文章 
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://swxu.github.io/categories/Tools/"/>
    
    
      <category term="Hexo" scheme="http://swxu.github.io/tags/Hexo/"/>
    
      <category term="Git" scheme="http://swxu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Github修改username后修复git历史异常</title>
    <link href="http://swxu.github.io/2020/04/13/Github%E4%BF%AE%E6%94%B9username%E5%90%8E%E4%BF%AE%E5%A4%8Dgit%E5%8E%86%E5%8F%B2%E5%BC%82%E5%B8%B8/"/>
    <id>http://swxu.github.io/2020/04/13/Github%E4%BF%AE%E6%94%B9username%E5%90%8E%E4%BF%AE%E5%A4%8Dgit%E5%8E%86%E5%8F%B2%E5%BC%82%E5%B8%B8/</id>
    <published>2020-04-13T04:09:31.000Z</published>
    <updated>2020-05-08T08:30:36.055Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>修改 <code>~/.gitconfig</code> 文件中的 <code>user.name</code>, <code>user.email</code>.</p></li><li><p>将下面的脚本文件 <code>git-user-change.sh</code> 放在需要修改的项目的上一层文件夹中, <strong>脚本的源码中需要修改对应的用户名和邮箱</strong>.</p></li><li><p>在项目根目录下执行 <code>sh ../git-user-change.sh</code> 便开始自动化重写所有脚本能匹配到的提交信息了. 拥有条件判断的此脚本, 最大的好处便是, 不会覆盖掉团队协作项目中, 他人的提交信息.<br>下面这条命令会将项目 Git 所有历史里删除对 src.zip 的记录, 整个 .git 文件夹会轻很多. <code>git filter-branch --force --index-filter &#39;git rm -rf --cached --ignore-unmatch ./src.zip&#39; --prune-empty --tag-name-filter cat -- --all</code></p></li><li><p>强制更新 <code>git push origin --force</code>, 如果需要授权, 在 github 上修改 SSH 公钥.</p></li></ol><ul><li>下面是 <code>git-user-change.sh</code> 的代码, 保存后执行上面的命令, 其中 <code>if</code> 中的判断条件是原来的邮箱, <code>then</code> 中是现在的名字和邮箱.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">git filter-branch --env-filter '</span><br><span class="line">    an="$GIT_AUTHOR_NAME"</span><br><span class="line">    am="$GIT_AUTHOR_EMAIL"</span><br><span class="line">    cn="$GIT_COMMITTER_NAME"</span><br><span class="line">    cm="$GIT_COMMITTER_EMAIL"</span><br><span class="line">    if [ "$GIT_COMMITTER_EMAIL" = "willsnowdev@gmail.com" ]</span><br><span class="line">    then</span><br><span class="line">        cn="shengwei.xu"</span><br><span class="line">        cm="shengwei.xu@qq.com"</span><br><span class="line">    fi</span><br><span class="line">    if [ "$GIT_AUTHOR_EMAIL" = "willsnowdev@gmail.com" ]</span><br><span class="line">    then</span><br><span class="line">        an="shengwei.xu"</span><br><span class="line">        am="shengwei.xu@qq.com"</span><br><span class="line">    fi</span><br><span class="line"> </span><br><span class="line">    export GIT_AUTHOR_NAME="$an"</span><br><span class="line">    export GIT_AUTHOR_EMAIL="$am"</span><br><span class="line">    export GIT_COMMITTER_NAME="$cn"</span><br><span class="line">    export GIT_COMMITTER_EMAIL="$cm"</span><br><span class="line">'</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://www.jianshu.com/p/6f2fdba48129" target="_blank" rel="noopener">参考文章</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改 &lt;code&gt;~/.gitconfig&lt;/code&gt; 文件中的 &lt;code&gt;user.name&lt;/code&gt;, &lt;code&gt;user.email&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将下面的脚本文件 &lt;code&gt;git-user-chan
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://swxu.github.io/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://swxu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>nlogn排序算法总结--快排、堆排、归并</title>
    <link href="http://swxu.github.io/2020/04/10/nlogn%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93-%E5%BF%AB%E6%8E%92%E3%80%81%E5%A0%86%E6%8E%92%E3%80%81%E5%BD%92%E5%B9%B6/"/>
    <id>http://swxu.github.io/2020/04/10/nlogn%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93-%E5%BF%AB%E6%8E%92%E3%80%81%E5%A0%86%E6%8E%92%E3%80%81%E5%BD%92%E5%B9%B6/</id>
    <published>2020-04-09T16:56:32.000Z</published>
    <updated>2020-09-28T13:40:01.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快排思想比较好理解, 每次找到一个元素的最终位置, 并把所有小于这个元素的值放在左边, 所有大于这个元素的值放在右边.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSortCore(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortCore</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = nums[low];</span><br><span class="line">        <span class="keyword">int</span> i = low, j = high;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= pivot) &#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= pivot) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = pivot;</span><br><span class="line">        quickSortCore(nums, low, i - <span class="number">1</span>);</span><br><span class="line">        quickSortCore(nums, i + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 无监督快排 (无监督思想可以在很多算法场景进行优化)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ungradedQuickSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pivot = nums[low + high &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = low - <span class="number">1</span>, j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (nums[i] &lt; pivot);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (nums[j] &gt; pivot);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(nums, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    ungradedQuickSort(nums, low, j);</span><br><span class="line">    ungradedQuickSort(nums, j + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 无监督快速排序 + 单边递归优化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ungradedQuickSort2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = nums[low];</span><br><span class="line">        <span class="keyword">int</span> i = low, j = high;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &lt; pivot) ++i;</span><br><span class="line">            <span class="keyword">while</span> (nums[j] &gt; pivot) --j;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">                swap(nums, i, j);</span><br><span class="line">                ++i;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; j);</span><br><span class="line">        ungradedQuickSort2(nums, low, j);</span><br><span class="line">        low = i; <span class="comment">// 单边递归优化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排的过程主要分为两步, 第一步初始化堆, 从最后一个非叶子节点开始从后往前做堆化调整, 第二步是将堆头与堆尾元素交换, 从而确定得到一个最大数或者最小数(所确定的数不参与下次迭代), 依次迭代到堆只剩最后一个元素即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        heapify(nums, i, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        swap(nums, <span class="number">0</span>, i);</span><br><span class="line">        heapify(nums, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> parent, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (child &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child + <span class="number">1</span> &lt; len &amp;&amp; nums[child] &lt; nums[child + <span class="number">1</span>]) &#123;</span><br><span class="line">            ++child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[parent] &gt;= nums[child]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            swap(nums, parent, child);</span><br><span class="line">            parent = child;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并的思想就是分治, 大问题化为小问题, 大数组化为小数组, 每个子问题都是将数组一分为两个有序数组, 然后再按序合并.<br>下面的代码是逆序对题目的代码, 是基于归并排序的, 代码只多了一个判断.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计逆序对个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(nums, low, mid);</span><br><span class="line">        mergeSort(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(nums, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, left = low, right = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= mid &amp;&amp; right &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[right] &lt; nums[left]) &#123;</span><br><span class="line">            <span class="comment">// 这个判断是为了统计逆序对个数，单纯归并排序并不需要</span></span><br><span class="line">            cnt += mid - left + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相等情况取左边是为了方便统计逆序对</span></span><br><span class="line">        help[i++] = nums[left] &lt;= nums[right] ? nums[left++] : nums[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= mid) &#123;</span><br><span class="line">        help[i++] = nums[left++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right &lt;= high) &#123;</span><br><span class="line">        help[i++] = nums[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">        nums[low + j] = help[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>三个 nlogn 的排序算法需要熟记, 面试经常让手撕代码.</li><li>常见排序算法的总结<br><img src="../../../../images/2020/04/10/SortAlgorithms.png" alt="常见排序算法总结"></li><li>工程中的排序算法结合了多种排序算法的特点, 下图是 Java 中的 sort 函数选择合适排序算法的逻辑.<br><img src="../../../../images/2020/04/10/SortInJava.png" alt="Java 中的排序算法"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h2&gt;&lt;p&gt;快排思想比较好理解, 每次找到一个元素的最终位置, 并把所有小于这个元素的值放在左边, 所有大于这个元素的值放在右边.&lt;/p
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://swxu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://swxu.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树非递归遍历--前中后序</title>
    <link href="http://swxu.github.io/2020/04/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86-%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F/"/>
    <id>http://swxu.github.io/2020/04/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86-%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F/</id>
    <published>2020-04-08T03:16:05.000Z</published>
    <updated>2020-04-08T03:24:49.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BTreeTraverseMethods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">private</span> TreeNode left;</span><br><span class="line">        <span class="keyword">private</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Pre-Order Traverse:"</span>);</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = stack.pop();</span><br><span class="line">            System.out.print(node.val + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"In-Order Traverse:"</span>);</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        TreeNode node = root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode popElem = stack.pop();</span><br><span class="line">                System.out.print(popElem.val + <span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">if</span> (popElem.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    node = popElem.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Post-Order Traverse:"</span>);</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>, node;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            node = stack.peek();</span><br><span class="line">            <span class="comment">// 出栈条件: 叶子结点 || (前序节点不为空 &amp;&amp; (该节点没有右子树并且前序节点是左节点 || 该节点的右节点是前序节点))</span></span><br><span class="line">            <span class="keyword">if</span> ((node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) || (pre != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (node.right == <span class="keyword">null</span> &amp;&amp; node.left == pre || node.right == pre))) &#123;</span><br><span class="line">                TreeNode popElem = stack.pop();</span><br><span class="line">                System.out.print(popElem.val + <span class="string">" "</span>);</span><br><span class="line">                pre = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode head = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">        head.left = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        head.right = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">        head.left.left = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        head.left.right = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        head.right.right = <span class="keyword">new</span> TreeNode(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        preOrderTraverse(head);</span><br><span class="line">        inOrderTraverse(head);</span><br><span class="line">        postOrderTraverse(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pre-Order Traverse:<span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line">In-Order Traverse:<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line">Post-Order Traverse:<span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">8</span> <span class="number">6</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>二叉树遍历的思路很容易理解不做过多阐述.</li><li>二叉树的遍历以及它衍生的题目是面试中比较常见的手撕代码题, 例如判断是否为二叉排序树可以用中序是否有序来判断等.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://swxu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树的遍历" scheme="http://swxu.github.io/tags/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>用自定义数据集训练YOLO</title>
    <link href="http://swxu.github.io/2020/04/05/%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AE%AD%E7%BB%83YOLO/"/>
    <id>http://swxu.github.io/2020/04/05/%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AE%AD%E7%BB%83YOLO/</id>
    <published>2020-04-05T14:34:32.000Z</published>
    <updated>2020-05-08T08:30:56.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLO-Training-Conclusion-on-Custom-Dataset-and-FAQs"><a href="#YOLO-Training-Conclusion-on-Custom-Dataset-and-FAQs" class="headerlink" title="YOLO Training Conclusion on Custom Dataset and FAQs"></a>YOLO Training Conclusion on Custom Dataset and FAQs</h1><blockquote><p><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">YOLO official website</a></p></blockquote><h2 id="Prepare-dataset"><a href="#Prepare-dataset" class="headerlink" title="Prepare dataset"></a>Prepare dataset</h2><p>You can google how to prepare your custom dataset. There are lots of tutorials available. I recommend <a href="https://timebutt.github.io/static/how-to-train-yolov2-to-detect-custom-objects/" target="_blank" rel="noopener">this article</a>. </p><p>My custom dataset has ~15k images and 3 classes. I just replace image files in VOC dataset <code>/VOCdevkit</code> with my custom images and run official python script to generate data YOLO needs. You can click the official website link above to find the script. It’s easy to learn how to use it.</p><h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><p>We need to modify <code>Makefile</code> before we <code>make</code> it.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPU=1 <span class="comment"># If you have a GPU, it will speed up the training process greatly.</span></span><br><span class="line">CUDNN=1 <span class="comment"># Using cudnn</span></span><br><span class="line">OPENCV=0 <span class="comment"># Using camera</span></span><br><span class="line">OPENMP=0</span><br><span class="line">DEBUG=0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Then, just <code>make</code> the source code.</p><h2 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h2><p>There are three files needing to be modified before training on custom dataset.</p><ul><li>First, you just need to write class names in your dataset to <code>data/voc.names</code>. Of course, you can change the file name.<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>Second, you need to modify <code>cfg/voc.names</code>. Just change it based on your custom dataset and file paths.<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">classes</span>= <span class="number">3</span></span><br><span class="line"><span class="attr">train</span>  = &lt;path to train file&gt;/train.txt</span><br><span class="line"><span class="attr">valid</span>  = &lt;path to test file&gt;/test.txt</span><br><span class="line"><span class="attr">names</span> = data/voc.names</span><br><span class="line"><span class="attr">backup</span> = backup</span><br></pre></td></tr></table></figure></li><li>Before strating step 3, I recommend you to read <a href="https://stackoverflow.com/questions/50390836/understanding-darknets-yolo-cfg-config-files" target="_blank" rel="noopener">this article</a> to understand what parameters mean.</li><li>Third, the key step here. We need to modify yolo network configuration to meet our requirements for custom dataset. Read configuration below <strong>carefully</strong>. Here we give two examples, <code>yolov2-tiny-voc.cfg</code> and <code>yolov3-voc.cfg</code>, you can configure the network you like.<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yolov2-tiny-voc.cfg</span></span><br><span class="line">[net]</span><br><span class="line"># Testing</span><br><span class="line"># batch=<span class="number">1</span></span><br><span class="line"># subdivisions=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Training</span><br><span class="line">batch=<span class="number">64</span> # you need to comment testing cfg <span class="keyword">and</span> uncomment training cfg</span><br><span class="line">subdivisions=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">width=<span class="number">416</span></span><br><span class="line">height=<span class="number">416</span></span><br><span class="line">channels=<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># you can change it <span class="keyword">for</span> your own settings</span><br><span class="line">learning_rate=<span class="number">0.001</span></span><br><span class="line">max_batches = <span class="number">40200</span></span><br><span class="line">policy=steps</span><br><span class="line">steps=<span class="number">-1</span>,<span class="number">100</span>,<span class="number">20000</span>,<span class="number">30000</span></span><br><span class="line">scales=<span class="number">.1</span>,<span class="number">10</span>,<span class="number">.1</span>,<span class="number">.1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[convolutional]</span><br><span class="line">size=<span class="number">1</span></span><br><span class="line">stride=<span class="number">1</span></span><br><span class="line">pad=<span class="number">1</span></span><br><span class="line">filters=<span class="number">40</span> # filters = num * (classes + coords + <span class="number">1</span>) = <span class="number">5</span> * (<span class="number">3</span> + <span class="number">4</span> + <span class="number">1</span>)</span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[region]</span><br><span class="line">anchors = <span class="number">1.08</span>,<span class="number">1.19</span>,  <span class="number">3.42</span>,<span class="number">4.41</span>,  <span class="number">6.63</span>,<span class="number">11.38</span>,  <span class="number">9.42</span>,<span class="number">5.11</span>,  <span class="number">16.62</span>,<span class="number">10.52</span></span><br><span class="line">bias_match=<span class="number">1</span></span><br><span class="line">classes=<span class="number">3</span> # you may need to change <span class="keyword">this</span></span><br><span class="line">coords=<span class="number">4</span> # compute filters above</span><br><span class="line">num=<span class="number">5</span> # compute filters above</span><br><span class="line">softmax=<span class="number">1</span></span><br><span class="line">jitter=<span class="number">.2</span></span><br><span class="line">rescore=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">object_scale=<span class="number">5</span></span><br><span class="line">noobject_scale=<span class="number">1</span></span><br><span class="line">class_scale=<span class="number">1</span></span><br><span class="line">coord_scale=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">absolute=<span class="number">1</span></span><br><span class="line">thresh = <span class="number">.6</span></span><br><span class="line">random=<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yolov3-voc.cfg</span></span><br><span class="line">[net]</span><br><span class="line"># Testing</span><br><span class="line"># batch=<span class="number">1</span></span><br><span class="line"># subdivisions=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Training</span><br><span class="line">batch=<span class="number">64</span> # you need to comment testing cfg <span class="keyword">and</span> uncomment training cfg</span><br><span class="line">subdivisions=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">width=<span class="number">416</span></span><br><span class="line">height=<span class="number">416</span></span><br><span class="line">channels=<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># you can change it <span class="keyword">for</span> your own settings</span><br><span class="line">learning_rate=<span class="number">0.001</span></span><br><span class="line">max_batches = <span class="number">40200</span></span><br><span class="line">policy=steps</span><br><span class="line">steps=<span class="number">-1</span>,<span class="number">100</span>,<span class="number">20000</span>,<span class="number">30000</span></span><br><span class="line">scales=<span class="number">.1</span>,<span class="number">10</span>,<span class="number">.1</span>,<span class="number">.1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[convolutional]</span><br><span class="line">size=<span class="number">1</span></span><br><span class="line">stride=<span class="number">1</span></span><br><span class="line">pad=<span class="number">1</span></span><br><span class="line">filters=<span class="number">24</span> # filters = <span class="number">3</span> * (classes + <span class="number">5</span>)</span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[yolo]</span><br><span class="line">mask = <span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">anchors = <span class="number">10</span>,<span class="number">13</span>,  <span class="number">16</span>,<span class="number">30</span>,  <span class="number">33</span>,<span class="number">23</span>,  <span class="number">30</span>,<span class="number">61</span>,  <span class="number">62</span>,<span class="number">45</span>,  <span class="number">59</span>,<span class="number">119</span>,  <span class="number">116</span>,<span class="number">90</span>,  <span class="number">156</span>,<span class="number">198</span>,  <span class="number">373</span>,<span class="number">326</span></span><br><span class="line">classes=<span class="number">3</span> # you need to modify</span><br><span class="line">num=<span class="number">9</span></span><br><span class="line">jitter=<span class="number">.3</span></span><br><span class="line">ignore_thresh = <span class="number">.5</span></span><br><span class="line">truth_thresh = <span class="number">1</span></span><br><span class="line">random=<span class="number">1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[convolutional]</span><br><span class="line">size=<span class="number">1</span></span><br><span class="line">stride=<span class="number">1</span></span><br><span class="line">pad=<span class="number">1</span></span><br><span class="line">filters=<span class="number">24</span> # filters = <span class="number">3</span> * (classes + <span class="number">5</span>)</span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[yolo]</span><br><span class="line">mask = <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">anchors = <span class="number">10</span>,<span class="number">13</span>,  <span class="number">16</span>,<span class="number">30</span>,  <span class="number">33</span>,<span class="number">23</span>,  <span class="number">30</span>,<span class="number">61</span>,  <span class="number">62</span>,<span class="number">45</span>,  <span class="number">59</span>,<span class="number">119</span>,  <span class="number">116</span>,<span class="number">90</span>,  <span class="number">156</span>,<span class="number">198</span>,  <span class="number">373</span>,<span class="number">326</span></span><br><span class="line">classes=<span class="number">3</span> # you need to modify</span><br><span class="line">num=<span class="number">9</span></span><br><span class="line">jitter=<span class="number">.3</span></span><br><span class="line">ignore_thresh = <span class="number">.5</span></span><br><span class="line">truth_thresh = <span class="number">1</span></span><br><span class="line">random=<span class="number">1</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[convolutional]</span><br><span class="line">size=<span class="number">1</span></span><br><span class="line">stride=<span class="number">1</span></span><br><span class="line">pad=<span class="number">1</span></span><br><span class="line">filters=<span class="number">24</span> # filters = <span class="number">3</span> * (classes + <span class="number">5</span>)</span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[yolo]</span><br><span class="line">mask = <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">anchors = <span class="number">10</span>,<span class="number">13</span>,  <span class="number">16</span>,<span class="number">30</span>,  <span class="number">33</span>,<span class="number">23</span>,  <span class="number">30</span>,<span class="number">61</span>,  <span class="number">62</span>,<span class="number">45</span>,  <span class="number">59</span>,<span class="number">119</span>,  <span class="number">116</span>,<span class="number">90</span>,  <span class="number">156</span>,<span class="number">198</span>,  <span class="number">373</span>,<span class="number">326</span></span><br><span class="line">classes=<span class="number">3</span> # you need to modify</span><br><span class="line">num=<span class="number">9</span></span><br><span class="line">jitter=<span class="number">.3</span></span><br><span class="line">ignore_thresh = <span class="number">.5</span></span><br><span class="line">truth_thresh = <span class="number">1</span></span><br><span class="line">random=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>Now, we can run the training command. Here we train from scratch, you also can download pre-trained weights from YOLO official website above.<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg</span><br></pre></td></tr></table></figure></li><li>In addition, you can read <a href="https://timebutt.github.io/static/understanding-yolov2-training-output/" target="_blank" rel="noopener">this article</a> to understand outputs of YOLO.</li></ul><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>It’s easy to test model trainde well. Just run command here.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector test cfg/voc.data cfg/yolov3-voc.cfg backup/yolov3-voc_final.weights &lt;path to testing image&gt;</span><br></pre></td></tr></table></figure><p>If you get <strong>no bounding box</strong> in <code>predictions.jpg</code>, you firstly need to check your <code>cfg/yolov3-voc.cfg</code> file. In fact, I forgot to uncomment testing configuration in <code>.cfg</code> file. And just modify it, you will get correct prediction results. If nothing changes, you need to think about whether your custom dataset correctly generated.</p><h2 id="FAQs"><a href="#FAQs" class="headerlink" title="FAQs"></a>FAQs</h2><h3 id="1-Dimension-mismatch-when-loading-network-model"><a href="#1-Dimension-mismatch-when-loading-network-model" class="headerlink" title="1. Dimension mismatch when loading network model"></a>1. <code>Dimension mismatch</code> when loading network model</h3><p>Obviously, your network filters is incorrect. Go back to <code>.cfg</code> file and modify <code>filters</code>.</p><h3 id="2-CUDA-Out-of-Memory-when-loading-data"><a href="#2-CUDA-Out-of-Memory-when-loading-data" class="headerlink" title="2. CUDA Out of Memory when loading data"></a>2. <code>CUDA Out of Memory</code> when loading data</h3><p>You need to modify <code>cfg/yolov3-voc.cfg</code>. Increase <code>subdivisions</code>, or decrease <code>batch</code>.</p><h3 id="3-Appearence-of-lots-of-nan-when-training"><a href="#3-Appearence-of-lots-of-nan-when-training" class="headerlink" title="3. Appearence of lots of nan when training."></a>3. Appearence of lots of <code>nan</code> when training.</h3><p>First, check your data path and data whether is correct. If that is not ok, you should focus on <code>learning_rate</code>. Generally, you should decrease your <code>learning_rate</code> in <code>.cfg</code> file.</p><h3 id="4-Training-output-obj-0-000000"><a href="#4-Training-output-obj-0-000000" class="headerlink" title="4. Training output obj=0.000000"></a>4. Training output <code>obj=0.000000</code></h3><p>It means that your network does not detect any object. Definately, it has some problems. You could tune <code>learning_rate</code> and <code>batch</code> in <code>.cfg</code> file. Generally, you should decrease the <code>learning_rate</code> or decrease the <code>batch</code>.</p><h3 id="5-No-bounding-boxes-when-testing-images"><a href="#5-No-bounding-boxes-when-testing-images" class="headerlink" title="5. No bounding boxes when testing images"></a>5. No bounding boxes when testing images</h3><p>I also encountered the problem. Actually, it is a careless problem. Just go back to the <code>.cfg</code> file and uncomment testing configuration and comment training configuration.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;YOLO-Training-Conclusion-on-Custom-Dataset-and-FAQs&quot;&gt;&lt;a href=&quot;#YOLO-Training-Conclusion-on-Custom-Dataset-and-FAQs&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://swxu.github.io/categories/Deep-Learning/"/>
    
    
      <category term="YOLO" scheme="http://swxu.github.io/tags/YOLO/"/>
    
      <category term="Object Detection" scheme="http://swxu.github.io/tags/Object-Detection/"/>
    
  </entry>
  
  <entry>
    <title>职场真相</title>
    <link href="http://swxu.github.io/2020/04/03/%E8%81%8C%E5%9C%BA%E7%9C%9F%E7%9B%B8/"/>
    <id>http://swxu.github.io/2020/04/03/%E8%81%8C%E5%9C%BA%E7%9C%9F%E7%9B%B8/</id>
    <published>2020-04-03T05:19:14.000Z</published>
    <updated>2020-06-28T03:30:47.843Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录曹大 caoz 2019 年度分享 – 职场真相</p></blockquote><h2 id="Ch1-关于面试"><a href="#Ch1-关于面试" class="headerlink" title="Ch1. 关于面试"></a>Ch1. 关于面试</h2><h3 id="1-1-做功课很重要"><a href="#1-1-做功课很重要" class="headerlink" title="1.1 做功课很重要"></a>1.1 做功课很重要</h3><p>面试前应先搜索了解该公司的背景，诸如股权结构、公司负责人的背景、公司主要产品线构成和主要收入构成、公司主要竟品和竞争格局。如有可能，尽量测试使用一下公司的产品, 并搜索一下相关公司的口碑和介绍。</p><p><a href="https://mp.weixin.qq.com/s/9cT-Ng_hvj9V61_XEl-ZVg" target="_blank" rel="noopener">职场自救指南</a></p><p><a href="https://mp.weixin.qq.com/s/NQuWI2cg_JVJa4SJSpw9rg" target="_blank" rel="noopener">求职是需要诚意的</a></p><p>重复强调一下，有不少公司网上有一些坏的口碑，怎么办？要评估一下，其实大部分知名企业都会存在两极口碑，甚至是很糟糕的口碑，但不代表这个公司没价值，你要知道自己目的是什么。</p><p>当然也要根据你手里的offer数量和质量综合判断，你一把名企offer，你去甄别口碑，如果你现在要解决当下吃饭问题，只要公司不是那种骗子公司或者法律风险吓人的公司，其实都可以去的。</p><h3 id="1-2-简单而精确的自我介绍"><a href="#1-2-简单而精确的自我介绍" class="headerlink" title="1.2 简单而精确的自我介绍"></a>1.2 简单而精确的自我介绍</h3><p>什么是简单精确，第一，最能体现你的价值和能力的点要重点表达出来。不要不好意思说，不要以为面试官已经完整的审阅了你的简历或求职信。</p><p><a href="https://mp.weixin.qq.com/s/v5uFBplY6lkcUqd7vuzETA" target="_blank" rel="noopener">谈谈自我介绍与第一印象</a></p><p>第二，不要啰哩啰嗦，什么都讲，要分清重点，年轻人找工作有时候生怕少介绍了自己的成绩，什么都要列出来，说实话，有些学校里的证书价值含量极低，你越强调，别人会觉得，你的能力不过如此，还不如不提。</p><h3 id="1-3-提出有价值的问题"><a href="#1-3-提出有价值的问题" class="headerlink" title="1.3 提出有价值的问题"></a>1.3 提出有价值的问题</h3><p>大部分公司面试都会有个让面试官提问的环节，很多面试者会问年终奖怎么发，休假怎么休之类的问题。实话说，这类问题不是不能问，别人明确给你offer的时候，你问是没有问题的。如果人家还在考核你的时候，问题本身是考核的一部分，能理解么？前面为什么说要做功课，这里要问出有价值的问题。</p><p>什么是有价值的问题，关于对方的产品，竟品，业务方向，技术方案，提出自己认真思考后的疑惑。实话说，做到有价值不容易，你可能觉得自己思考深度已经够深了，没准在别人眼里还是一个非常烂的差问题，这怎么办，岂不是弄巧成拙？</p><p>看你怎么理解了？你并不是只有一次面试，职场也并非只有一次选择，被diss了，被别人批驳了，勤反思，为什么很关键的点自己没想到，为什么自己觉得很复杂的问题别人觉得不值一提？只要有收获，就不亏，每个人的职场认知都不是一步到位的，发现自己的不足，是成长的过程，只要成长够快，好的offer迟早是你的，不要在意一城一池的得失。</p><p><a href="https://mp.weixin.qq.com/s/yW4rto4VF1AwFCs62UMZaw" target="_blank" rel="noopener">职场通病之 - 别把自己当小受</a></p><p><a href="https://mp.weixin.qq.com/s/YT85l1W9IqeybiE0fso0Bw" target="_blank" rel="noopener">年轻人，如何才能抗造之 - 预期管理及心态控制</a></p><p>最怕的是什么，面试受了点挫折，出了点丑，问的问题被鄙视了，就觉得自己被针对、歧视了，加戏很多，对方不尊重自己了，企业文化糟糕了，有时候网上看看各种讨论，这样心态的年轻人还是挺多的。</p><h3 id="1-4-保持后续可行性"><a href="#1-4-保持后续可行性" class="headerlink" title="1.4 保持后续可行性"></a>1.4 保持后续可行性</h3><p>技术面试，或者产品运营的面试被难题考倒了，很多人当然会很沮丧，很多人会很沮丧，认为失去了一次机会。</p><p>其实这也是一种学习的机会，那么可以考虑这样的一种回答方式，“这道题确实超出了我的知识范畴，我回去想认真思考一下，方便留一下您的联系邮件吗，我希望再次解答后还得到您的指点，不不不，我不是奢求再来一次面试，我只是想学会这个算法。”</p><p>或者这类“今天我回答的不好，谢谢您帮我发现了自己的差距和不足，能不能给我一些相关问题的学习资料，书籍和网址，我想回去认真学习一下，如果有可能，不知道以后还能不能得到您的指点，能否留一个您的联系方式。”</p><p>当然，以上并不只是面试的一套说辞，你回去之后还是要认真的完成学习并且认真的把更好的答案发给对方，并诚恳的希望得到对方的批评和指导。</p><p>每个求职者都会说自己热爱学习，愿意接受挑战，怎么证明啊？你看，你没拿到offer，都愿意去学习，这个印象分是什么。下次这个公司有新的人力诉求的时候，或者其他岗位有诉求的时候，会不会想到你？我不能说肯定会，但我会说，这样的机会真的会有。</p><h3 id="1-5-关于离职原因的回答"><a href="#1-5-关于离职原因的回答" class="headerlink" title="1.5 关于离职原因的回答"></a>1.5 关于离职原因的回答</h3><p>这是最难回答的面试问题了，那么分三个情况。</p><p>第一，非裸辞的情况，这种相对容易一点，觉得这边机会更好，发展空间更大，能学到更多东西，待遇更有优势，这些都没问题的。尽量不要埋怨老东家，不要说老领导多不好，老东家多苛刻，实话说，人家会很担心，你以后去下一家公司的时候，还会这么说他们。</p><p>第二，裸辞的情况下，那么确实要解释的更多，有些是比较容易解释的，旧公司业务风险较高，所以赶紧撤出。加班太多，个人身体有些吃不消/家里人顾不到，这种直说也无妨。有些可能确实跟旧东家发生了较多矛盾，或者甚至是被裁员，被开除。可能讲出来不是很好听，我觉得把握一个原则，要敢承认自己的不足。比如当这争论的时候确实有些冲动，或者说认真反思了一下，当时确实可以做的更好一些。不要一昧的指责旧东家和旧同事，要认真的反思和承认不足，摆事实讲道理，特别是情绪要稳定，一定要让面试官觉得你是讲道理的人，是不记仇的人，这点很重要，说实话，职场上的老江湖，没有谁会轻信一家之言，你真的特别委屈冤枉，别人也不会认为这是完全的事实。</p><p>第三，换工作较多的场景，比较碎的工作经验，说实话，尽量尽量不要有这样的职场记录，你说我抹去一些行不行，其实是可以的，但还是尽量不要有这样的职场记录。现在一些年轻人，挺任性的，工作不开心就辞职，换工作比换手机快，一年换好几份，当然往好处说也是一种人生体验，但确实在后续求职应聘的时候，会有很不好的影响。</p><p>还是那句话，要坦诚自己的问题，面试官问了，别找太多借口，自己当时年轻，社会经验不足，求职的时候考虑不周到，工作的时候也有点任性，坦坦荡荡的说，尽量让人觉得你现在成熟了，认识问题了，不会那么毛躁了。</p><p>当然，有些换工作的经历并不是坏事情，比如前任领导离职创业把我拉出去了，后来创业失败了，投资人拉我进了另一个项目，但很不幸项目也没成功。这种其实不是坏事，说明你的能力被之前的领导，投资人认可，虽然项目换的多，但不会是负面。现在不是说找份工作一定要干很多年，但换工作还是要谨慎，尽量找能坚持几年的事情做。</p><h3 id="1-6-关于项目经验的回答"><a href="#1-6-关于项目经验的回答" class="headerlink" title="1.6 关于项目经验的回答"></a>1.6 关于项目经验的回答</h3><p><a href="https://mp.weixin.qq.com/s/A3k8aRbd7o4uuELZAMM_KA" target="_blank" rel="noopener">从校园到职场 - 面试官是怎么看简历里的项目经验</a></p><p>面试官经常会问，你以前做过的项目，及你在项目中的工作是什么。我其实也强烈建议，日常工作中养成勤奋总结的好习惯。功夫当然还是在日常。</p><p>我以前说过这个案例，项目的方案描述，数据及逻辑清晰不清晰，比如性能优化，优化前的并发指标是什么，优化方案是怎么考虑的，优化后如何测试的，测试指标是怎样的。</p><p>上线后的数据指标是怎样的，进一步优化的预案有没有，对进一步并发压力的预警系统有没有做，怎么做的。很多人只是简单描述了优化方案，然后说问题解决了，这其实是不行的。</p><p>项目经验，你的总结能力比项目本身更重要，项目很牛逼，你讲出来都是泛泛而谈，我是里面的工程师，写了一个什么结构，你觉得你讲的很清楚，面试官怎么觉得？项目牛逼和你有关系么？项目很一般，你讲的逻辑很清晰，什么问题，如何解决，为什么选择这个方案，效果对比，说明什么，说明你分析问题，处理问题的思路清晰，逻辑严谨，这是人家看重的。</p><p>所以，面试前，把你当年最得意的，认为最能体现自己价值的项目经验，认真复盘一下，尽可能用数据化的方式展现出来，并整理好你的决策和分析逻辑，以及整个项目的分析逻辑。</p><p>为什么很多人觉得我牛逼，很多事情不是我做的，但是我整理后写出来，思路很清晰，逻辑很严谨，数据指标很给力，人家至少知道，这个事情，我是理解透彻了，面试官发现你对项目理解透彻了，能够驾驭了，是不是你完成的，还那么重要么。</p><h3 id="1-7-刷题"><a href="#1-7-刷题" class="headerlink" title="1.7 刷题"></a>1.7 刷题</h3><p>刷题有用没？其实是有用的，特别是巨头的面试，还是很看重的。技术面试，leetcode的题目，如果有足够的刷题经验，还是会很有帮助。</p><p>刷题的几个要点，第一，举一反三，一定要对解题思路理解透彻，能够让算法适应不同的类似场景。第二，一定要增强题目理解力，因为面试官问问题的时候，往往不是题库里那么直接，很多人明明刷题做的很好，但是现场理解上出了偏差，本来是做过的东西，现场换了一个问题，就不知道怎么处理了。</p><p>那么现场如果对面试官的题目理解不到位，可以多问一些问题来理解，不要不好意思问，问清楚再回答。</p><p>刷题的时候自我感觉没问题，面试理解错，这种情况其实非常常见，那么同时，我也说过容错性的话题很多次，也要允许面试官，存在表达歧义的可能性，这就是为什么要追问，要通过追问明确问题的原因。</p><p>增加理解力和沟通能力，在职场永远都是非常重要的。</p><p>我有篇文章，找个小伙伴，日常沟通训练，不知道有多少读者去实践了。</p><p><a href="https://mp.weixin.qq.com/s/f_CF8dRObw78k9b9DFAyKA" target="_blank" rel="noopener">有效提升沟通能力，也许该找个小伙伴</a></p><h3 id="1-8-交流得体"><a href="#1-8-交流得体" class="headerlink" title="1.8 交流得体"></a>1.8 交流得体</h3><p>沟通交流过程中，如何得体，不要太过拘谨，但也不要太过于随便。</p><p>这个度怎么把握？<br>说真的，有些年轻人学校里随便惯了，进入职场的时候，还是那种无所谓，各种玩笑，各种不在乎的样子，这种印象是很不好的。</p><p>第一，穿衣着装，不是说非要正装西服，但还是要相对正式一点，比如短裤背心是不合适的，当然如果你在业内是顶尖大牛，你穿什么都行，职场新人，求职的时候，着装稍微正式一点。</p><p>第二，称谓和交流，客气一些。多用“您”字，多说几句谢谢，多体谅一下面试官，“没关系，我可以等”。“今天学到了很多，感谢您的指导。”“对不起，我能稍微打断一下么，刚才那个问题没听清楚。”，“不好意思，我想多问一句，这个题目中的什么什么，我理解是这样这样，不知道是不是。”</p><p>第三，也不用过于拘谨，适当的主动表达也是很有意义的。“我试了一下咱们的产品，真的很好用，昨天还在跟同学安利呢。”，“咱们公司今年增长太快了，我还特意看了一下财报数据，太惊人了。”</p><p>第四，既要谦虚，也要有自信，不知道能不能理解这个尺度。“我们当年这个项目其实还是有些缺陷的，当时经验不足，时间也比较紧张，有几个地方这里那里的考虑不全，如果现在交给我来做，应该会好很多。” 要承认自己的不足，也要对自己的发展空间有信心。“您提的这个问题，确实我现在可能没办法回答到位，不过如果给我一周时间，我相信会给您一个满意的答案。”</p><p>第五，无论面试成败，都要感谢对方，保留好印象，行业不大，人生何处不相逢。</p><h2 id="Ch2-什么是职场中的态度"><a href="#Ch2-什么是职场中的态度" class="headerlink" title="Ch2. 什么是职场中的态度"></a>Ch2. 什么是职场中的态度</h2><h3 id="2-1-愿意尝试-愿意学习-积极沟通"><a href="#2-1-愿意尝试-愿意学习-积极沟通" class="headerlink" title="2.1 愿意尝试, 愿意学习, 积极沟通"></a>2.1 愿意尝试, 愿意学习, 积极沟通</h3><p><a href="https://mp.weixin.qq.com/s/tlw7hm9No7WNnaDqozyB7w" target="_blank" rel="noopener">谈谈主动工作</a></p><p>在职场里，态度是非常关键的。</p><p>遇到困难和障碍，是否愿意学习，是否愿意尝试，这是很重要的，还记得王兴不是贴过一段记录，说他们公司谁谁谁，问什么东西用过没有，人家的回答是，没用过，不过我可以学。</p><p>王兴为什么会贴这句话，“我不会，但我可以学”，在职场是几乎每个老板都看重的素质。</p><p>“我不是这个专业的”，“我来这里不是为了干这个的”，“这个事情不该我来做”，很糟糕，真的，很糟糕。</p><p>另一点就是积极沟通，什么是积极沟通，有问题就问，有观点要表达，当然表达方式可能需要一些技巧，但要敢于表达，有机会要争取，有责任要敢承担。</p><p>此外，项目出现问题，或者出现阻碍的时候，要主动通报，主动寻求协助，主动告知相关同事，这也是积极沟通很重要的一点。</p><p><a href="https://mp.weixin.qq.com/s/QXEg4oK48G0X-AV3X9c2NQ" target="_blank" rel="noopener">从校园到职场 - 提问与交流</a></p><p><a href="https://mp.weixin.qq.com/s/WI-rFdNOQjRfcwnXNFYx9g" target="_blank" rel="noopener">再谈职场沟通</a></p><p>我们一直说的，印度裔在欧美为什么比华裔吃香，积极沟通这件事上，我们很多人真的没有当回事。中国人干活，印度人表功，为什么会这样，真的是职场不公？其实不是的。</p><p>积极沟通对应的是消极沟通，什么是消极沟通，坐等老板给机会，坐等别人派任务，别人不问就闷头不说，遇到问题不找人帮忙，非要自己抗，影响全局还觉得自己很委屈。</p><p>当你作为老板，面临项目安排规划和人员调配的时候，你就会理解，为什么积极沟通如此重要，为什么闷头做事的中国人不如擅长表功的印度人。我非常希望读者能彻底理解这一点。</p><h3 id="2-2-关于加班的话题"><a href="#2-2-关于加班的话题" class="headerlink" title="2.2 关于加班的话题"></a>2.2 关于加班的话题</h3><p><a href="https://mp.weixin.qq.com/s/Gz5rBTpMdFkNZUZKlV7D4Q" target="_blank" rel="noopener">关于程序员的996，我们谈谈历史和逻辑</a></p><p>我知道很多人不想加班，但确实很多公司可能存在较多加班场景。</p><p>第一，要理解临时性的加班任务，比如线上出了一个紧急bug，或者有个活动得组织和维护压力非常大，我觉得除非家里有紧急情况需要处理，这种加班还是多体谅一下公司。<br>比如所有国内电商周边公司双11可能都加班，你要想吃这碗饭，你说你坚决不加班，那可能这行真的没你位置了。</p><p>第二，在工作效率和表现上体现优势，你不加班，但你做的事情漂亮，任务完成的很好，那你跟领导沟通的时候，也有足够的底气。</p><p>第三，积极沟通，充分理解诉求和目标，减少无用功。这个去年分享课也提过，很多职场的人闷头做事，把简单的事情做复杂，把很容易处理的问题扩大化，实际上很多都是一厢情愿造成的。多沟通，深入了解诉求，学会把握重点，抓大放小，很多时候，看上去很复杂的工作任务，其实可能没那么复杂，要允许领导描述不清，但自己应该具有进一步核对和澄清的能力。事情多的做不完，最后发现都是无用功，这种情况在职场真的非常常见的！</p><p>第四，部分任务可以考虑在家完成，我在西雅图见一个老朋友，FB的华人技术经理，美国名校博士，我们觉得美国公司不加班，其实他说很辛苦的，给我看他的日常任务排期，从早到下午都是会议，然后说，白天上班根本没时间写代码，而自己还是有很多代码任务的，怎么办，晚上回家写。</p><p>是的，因为要接孩子，从不在公司加班，但实际上每天都要工作到很晚。 据说在FB这种情况并不少见。 其实美国也不止是FB如此，西方互联网巨头，很多人工作也是蛮辛苦的。</p><p>这就存在一个跟领导沟通的问题，家里确实有事情，不能在公司加班，但应该完成的工作任务会在家里完成，不会影响进度。实际上家里如果干扰少一些，完成的效率会更高。可能在公司需要几个小时扯皮交流然后慢慢熬的任务，回家后一个小时，甚至半个小时就搞定了。而且你不用去想着如何偷懒摸鱼，早干完时间都是自己的。</p><p>第五，认清现实，我们讲正确呢，说一个好的企业不应该大量无效加班，但另一方面，我们在职场，确实很多事情不是自己认为对就可以的。</p><p>如果你能选择一个不加班，待遇好，成长好，而且还能发挥你优势的岗位，当然，我恭喜你。</p><p>如果你发现很多条件不能兼顾，想清楚自己想要什么，这点很重要。</p><p>选择offer 的时候，很多时候你不可能拿到完全满意的条件，这时候，什么是你当前最看重的，我不能替你做主。</p><p>我去年讲过职场的成长期，成熟期和变现期，不同期间不同诉求，但不同的人有不同选择，不要苛求完美的职场，不要苛求完美的工作，想好自己这一步能获得什么很重要。</p><h3 id="2-3-面对事故和问题"><a href="#2-3-面对事故和问题" class="headerlink" title="2.3 面对事故和问题"></a>2.3 面对事故和问题</h3><p>职场经常会遇到一些严重的事故，问题，障碍。</p><p>很多人觉得我必须努力解决掉所有问题，再去给领导汇报，这样可能显得自己比较厉害和负责。</p><p>当然，如果你能尽快的解决掉问题，处理完事故，然后写汇报，这是没问题的，但很多时候，你可能没办法快速解决，快速处理，而且，甚至可能这个问题会影响到很多关联的同事，很多相关工作和计划安排，这时候，你如果还是憋着自己去解决，不汇报，不通知，就非常要命了。</p><p>一定要有全局意识，如果问题会导致其他人的工作延期或者对别人的工作有重要影响，或者超出个人能力范围，一定要主动知会相关人员，并寻求协助。</p><p>就算你工作很努力，一直很拼，很竭尽全力的处理问题，你认为自己的表现已经足够好了，但因为你没有知会关联同事，影响了其他人的进度和主管的项目把控，你这个努力也不能扭转这个损害，你觉得自己委屈，出bug，出故障难道不是很常见的事情么，出问题可以说不是什么太大的责任，但不通报是严重的灾难。当你成为经理，总监，或更高层的管理者，你就明白为什么这么说了。</p><p>我经常对自己公司的员工说这样的话，但我发现很多人依然还是我行我素，自己闷头去处理问题，闷头解决问题，不通报，不知会，总想着解决完再告诉我。讲真，这种情况惹得我火很大，这是管理者不能容忍的。</p><p>面对事故和问题，还有一个责任的承担问题，其实遇到事故，遇到问题，第一重要的是尽快解决问题，责任不要急于撇清，不要急于去分辨，先解决问题。不要说，这不是我的责任，这不是我的错，先说，我现在就去检查，去解决。解决完，处理完，写汇报的时候，再去说明真实原因和逻辑。</p><p>那么该自己承担的责任，要敢于承担，不要总是想着甩锅，总是想着辩白，大部分主管和领导都不傻，年轻人进入职场，千万不要小聪明，很容易被识破，如果发现你不诚实，没担当，这个问题的严重性远远大于你犯了错误。</p><p>但承担责任，敢于担当，也要有具体的行动，比如如何弥补，如何有效的预防类似的问题，如何进一步提升自己的问题解决能力，而不是每次都态度诚恳的道歉，认错。你总是态度很诚恳，但总是犯同样的错误，这也不行对不对。</p><p>我在职场真的见识过那些会甩锅，会推卸责任的年轻人，我说实话，可能一次两次，领导没有真的追究，看上去好像平安无事，但后面遇到升职机会或者更好的项目安排的时候，基本上领导是不会给他们的，我是看在眼里的，这样的案例并不少。</p><p>很多时候这些人觉得自己很聪明，每次都没事，但他们并不知道，人家已经给他们在心里打上一个标签。后续无数好机会都跟他们没关系了。</p><h3 id="2-4-面对合作诉求"><a href="#2-4-面对合作诉求" class="headerlink" title="2.4 面对合作诉求"></a>2.4 面对合作诉求</h3><p>第一，是跟上司和领导通报。很多内部合作，别人来找你，你觉得不麻烦，或者是对方级别比较高，你不敢得罪，就去给人家做事情了，但你的直接上司不知道，你影响本职工作进度，或者有些数据和信息处理是未经授权的，这其实就非常糟糕了。我以前就不是太在意这个，总觉得我为了公司难道不对么？你的上司有权决定这件事该做还是不该做，以及该如何做。你说我私下不影响进度帮同事忙行不行，有些信息数据授权的问题要考虑的，企业内部也有风控，很多你不以为然的事情可能是有严重问题的。遇到严格的内部审计吃不了兜着走的。要通报，要征询上司的授权，不要总觉得无所谓，可能一两次上司没有追究你的问题，但是记着，他心理可能给你打标签了，你没有尊重他的管理职权，他以后怎么会信任你。</p><p><a href="https://mp.weixin.qq.com/s/RLy79oG-ovYr23oOWUPrgA" target="_blank" rel="noopener">那些用力过猛的员工</a></p><p><a href="https://mp.weixin.qq.com/s/b0vPDniK3S1KcfWtTQ27lQ" target="_blank" rel="noopener">再谈职场中的用力过猛</a></p><p>第二，是外部合作中，关于利益诉求和目标的问题，以前旧文也提过，很多职场的人会用力过猛，以为自己为公司特别尽力，各种事情务必在自己公司角度争取最大利益，其实是很糟糕的，因为长远的合作需要双赢，也需要持续的信任。太鸡贼太苛求实际上过犹不及。</p><p>包括自媒体合作也是，有些企业的公关恨不得自媒体作者所有数据都提供清清楚楚，内容版式改上七八遍各种调整，各种朋友圈微信群都要给他们发一轮，似乎他们这样是为了公司的宣传效果，体现工作价值。坦白说，遇到我和冯老师这种大V，合作一次就烦了，爱做不做，爱信不信，唧唧歪歪，不伺候行不行啊。反而有些简单明了的，他们轻松，我们也轻松，长期合作，我们特么的也不会为了赚他一笔广告费砸自己招牌对不对。确实效果不太好的，不用广告主说，看到数据不理想，我直接补送一个位置就是了。</p><p>合作的要点，总结一下，一是向上汇报，二是双赢互利互信。别鸡贼，别什么便宜都想赚，多换位思考。</p><h3 id="2-5-面对可能的误解和委屈"><a href="#2-5-面对可能的误解和委屈" class="headerlink" title="2.5 面对可能的误解和委屈"></a>2.5 面对可能的误解和委屈</h3><p>职场中会不会背锅，有没有委屈，会不会被误解。肯定有，而且很常见。</p><p>但我说句潜规则，领导会喜欢那些经得起委屈 ，扛得起批评的人。很多事情，时间会给出不同的答案。当年王坚博士搞阿里云的时候被批判的还少么，全公司大会上被几乎各个部门吐槽，最后怎样，现在叫王坚院士。</p><p>还有就是，其实有不少领导，只有对亲信才会批头就骂，毫不留情。你看他对你客客气气，从不大声指责，说实话，根本就没那你当自己人。</p><p>做好手头的工作，用事实来证明自己，事实是最好的辩解。</p><p>当然，并不是说遭到误解就不解释，有些真的需要时间来证明，有些可能需要深入的沟通，但这里有两点要说明，第一，就事论事，切忌情绪化和人身攻击。否则对的也会变错。第二，只列事实即可，不要臆测，不要假设，不要扣帽子。事实如此，不要说对方是怎样怎样陷害你，这些都是臆测，而且很多都是错误的臆测。</p><p>当然，职场还有一个潜规则，就是尽可能有证据留存，比如沟通邮件，会议记录，确认通知。遇到扯皮的时候，没有证据，就没办法证明责任了，比如某个需求到底是谁提出的，为什么这么提，你明明只是执行者，但是需求方说没提过，你百口莫辩。</p><p>最后，还是要强调，职场不能怕委屈，不能怕误解，时间真的会给出证明。你背了锅，也许你的领导不清楚，但也许别人清楚，公司发展过程中，每个人的角色都会变化，只要你自己不要自暴自弃，总会有新的机会，在某些人眼里，你的委屈甚至是加分项。</p><h3 id="2-6-不吝称赞"><a href="#2-6-不吝称赞" class="headerlink" title="2.6 不吝称赞"></a>2.6 不吝称赞</h3><p><a href="https://mp.weixin.qq.com/s/b0vPDniK3S1KcfWtTQ27lQ" target="_blank" rel="noopener">再谈职场中的用力过猛</a></p><p>读书的时候，经常会有一个坏习惯，嘴比较损，特别喜欢揶揄别人，并认为这是关系亲密的象征。说实话，这个问题很常见，我也不例外。</p><p>但职场有时候不自觉就会得罪人。而且自己还以为彼此关系很融洽。</p><p>很多人不喜欢称赞别人，觉得是拍马屁，觉得是奉承。</p><p>我这么说吧，如果人家做的真的好，确实体现了水平，你就应该正面的称赞别人，职场情商里，最重要的就是这条。</p><p>特别是团队合作，项目总结，要感谢所有帮助过你的同事，上司，下属，感谢每个做出贡献的人，并如实的称赞他们的功劳。</p><p>赞美他人会让你的职场和社交关系突飞猛进，真的。<br>把那些用于揶揄挖苦的语言天赋转为赞美，你的职场之路会完全不同。</p><p>实话说，我也不喜欢奉承，拍马屁，很多名气很大的人我也不给面子的，但我认为如实称赞是非常值得的，很多人在某些领域很优秀，首先，你应该看的到，然后，也应该说出来。</p><h2 id="Ch3-信任是如何产生的"><a href="#Ch3-信任是如何产生的" class="headerlink" title="Ch3. 信任是如何产生的"></a>Ch3. 信任是如何产生的</h2><p>职场信任关系是极为关键的，取得信任才能获得更多的机会，那么信任不是一蹴而就的，需要积累，以下是信任关系的一些要点。</p><h3 id="3-1-正确而即使的汇报"><a href="#3-1-正确而即使的汇报" class="headerlink" title="3.1 正确而即使的汇报"></a>3.1 正确而即使的汇报</h3><p><a href="https://mp.weixin.qq.com/s/tlw7hm9No7WNnaDqozyB7w" target="_blank" rel="noopener">谈谈主动工作</a></p><p><a href="https://mp.weixin.qq.com/s/fWx_JY6tcrYr8DJ6YmPeog" target="_blank" rel="noopener">职场推进屡屡受阻，别总找借口。</a></p><p>常见问题，该汇报而不汇报任何可能导致你所承诺的时间计划任务产生变动的因素和事件。<br>任何可能需要上一级授权的事件和工作。<br>任何可能影响团队其他人或公司其他团队工作安排和计划的因素和事件。<br>里程碑事件，进度变化，任务状态需要其他团队协助，资源协助的事件和工作。</p><p>很多人闷头做事，自己闷头解决问题，不汇报，不知会，总想着自己解决完问题再汇报，我再次强调，这是极为糟糕的！我自己团队有这种情况，我是极为火大的，如果你是创业者，你就能理解为什么这种情况极为糟糕。因为很多项目进度和后续安排，彻底失控。</p><p>我希望读者理解，作为管理者，最怕的不是问题和困难，而是失控。完全无法掌握项目的进度，障碍和影响范畴。<br>很多闷头做事的人犯了严重的错误而自己不知道，觉得自己很辛苦，觉得别人天天打小报告的还能升职，你导致了领导失控，你还觉得自己没问题。</p><p>常见误区，不该汇报而频繁汇报，比如自己职权内完全可以处理并解决的问题和事件。<br>无意义的表功表忠心；<br>流水账，工作清单记录。</p><p>汇报什么呢，我今天做了什么，我完成了什么，我解决了什么问题，我学习体会了领导的讲话，一切都是表达我很努力，很认真，很勤奋的工作。</p><p>这种普通员工这么写呢，也不是什么大问题，但如果你有一定职务级别，这样写是很糟糕的。因为这些事情，很多是上级完全不关心的。</p><p>我为什么要关心你今天写了什么代码，解决了什么问题，我要关心的是你进度到哪里了，你任务完成的如何了，预计上线时间会不会有影响，对项目团队有没有影响，需要不需要我做什么。<br>很多人觉得自己汇报的很详细，工作量很大，但为什么每次升职都轮不到自己，人家觉得你就是一个闷头干活的，根本抓不住重点讲，连份汇报都写不好，还谈什么升职。</p><p>认真的想想，如果你是领导，底下人的汇报对你来说意味着什么，是让你继续掌控项目的进展和状况，同时让你知道你需要做什么来推动这个项目前进，解决中间的问题。很多人认为汇报就是说自己工作多努力多辛苦多了不起，骨子上就错了。</p><h3 id="3-2-完成任务是第一位的"><a href="#3-2-完成任务是第一位的" class="headerlink" title="3.2 完成任务是第一位的"></a>3.2 完成任务是第一位的</h3><p>很多人觉得怀才不遇，我有很好的想法领导不采纳，我有很棒的建议领导不肯听。或者我的方案比领导的更好。</p><p>是真的么？也许是真的，但问题是，领导凭什么相信你呢？这是需要过程的，而这个过程最核心的就是，你要先把交代的任务做好。</p><p>你可以说你有更好的建议，更多的想法，基本的工作没做好，你谈什么其他呢？</p><p>建立信任的第一步，先把交代的任务做好，不管大事小事，完成到位。你说领导的设计不合理，你完成到位，然后项目没有成功，这不是你的责任，但你已经证明你自己可以做好事情，建立了做事靠谱的印象分，你再提出新的方案，新的计划，被接受的可能性更大一些。</p><p>嫌弃工作不重要，嫌弃事情没有办法体现你的能力和价值，但又不好好做，应付，错漏百出，然后埋怨领导不给你更好的机会，不让你做更有挑战的工作或者完成你更伟大的梦想，信任基础啊。</p><p>很多失败的项目同样可以建立信任基础，你做的好不好，别人看的出来，失败的原因，别人能想明白，你自己没做好，说是别人设计问题，这个你推卸不出去的。你至少要让自己的表现足够好。</p><h3 id="3-3-提出有价值的问题-不断提出有价值的问题"><a href="#3-3-提出有价值的问题-不断提出有价值的问题" class="headerlink" title="3.3 提出有价值的问题, 不断提出有价值的问题"></a>3.3 提出有价值的问题, 不断提出有价值的问题</h3><p><a href="https://mp.weixin.qq.com/s/zvGixaCSkVX64iNNkksyUw" target="_blank" rel="noopener">caoz谈能力成长系列 - 提问的技术</a></p><p><a href="https://mp.weixin.qq.com/s/QXEg4oK48G0X-AV3X9c2NQ" target="_blank" rel="noopener">从校园到职场 - 提问与交流</a></p><p>不要怕提问，不要不敢提问，其实提出有价值的问题，是建立职场信任很关键的步骤。</p><p>上司讲解了产品设计目标，你提出关键的一些要点问题，这证明什么，第一，你认真的去理解上司的讲话了，第二，你有自己的深入思考，第三，你能从中发现一些关键点，关键问题。</p><p>提出有价值问题的人，更容易得到好的项目机会和升迁机会，真的。欧美更是如此，我以前讲过，新加坡英语职场培训，案例里，乖乖记录不提问的是坏案例，而能举一反三提出有价值问题的是好案例。不懂必须问清楚是这边职场很重要的原则。</p><p>当然，尽量不要问蠢问题，什么是蠢问题，你一个设计师去问马云，集团下一步的海外战略是什么，听上去很高大上，其实是个蠢问题。</p><p>与自己工作职能目标密切相关，具有一定的合理选择范围，并且需要一定的洞察力才能回答的的问题，那种根本不用选择的问题也是蠢问题，比如，问上司，咱们是要做合法的产品还是违法的？你说呢。</p><p>如果对问题的答案表示质疑，也可以合理指出，请问为什么我们会选择这样一个方案，从而理解方案动机和选择逻辑，这对工作中很多重要选择很有帮助，你才知道什么是你应该关注的，是应该重视的，什么不是。</p><h3 id="3-4-不要试图掩盖自己的弱点-要主动寻求帮助和提升"><a href="#3-4-不要试图掩盖自己的弱点-要主动寻求帮助和提升" class="headerlink" title="3.4 不要试图掩盖自己的弱点, 要主动寻求帮助和提升"></a>3.4 不要试图掩盖自己的弱点, 要主动寻求帮助和提升</h3><p>很多年轻人知道自己存在缺点和不足，不希望领导知道，尽量去隐瞒，用其他借口和理由规避自己的不足，其实我年轻时候也会这样。<br>主动寻求帮助和提升，其实更容易建立与领导的信任。</p><p>第一，坦诚是有长期复利的。</p><p>第二，从心理学来说，领导会认为，帮助你成长是他的成本，他有回报预期，而他的回报预期，就是你向上的机会。</p><p>第三，以前科举，学子们中榜后要去拜老师，递门生贴，我希望你们能理解这个背后的含义是什么，你主动寻求领导的帮助和提升，其实也是递门生贴。</p><h3 id="3-5-扛得住委屈-忍得住寂寞-坚持出成果"><a href="#3-5-扛得住委屈-忍得住寂寞-坚持出成果" class="headerlink" title="3.5 扛得住委屈, 忍得住寂寞, 坚持出成果"></a>3.5 扛得住委屈, 忍得住寂寞, 坚持出成果</h3><p>有些委屈，需要时间来证明，那就花点时间去证明。</p><p>有时候，别人风光在前，你觉得不公平，但自己做好自己的事情，很多时候，时间会给你公平，这样的案例我在职场看到太多了，不要说三十年河东，三十年河西，风光一时的可能没有一两年就原形必露，而扎扎实实做事情的不会总是被埋没。当然，这里依然要强调沟通和汇报的能力。但你要做出证明自己的成果，不要总是因为一时委屈和埋怨就半途而废。</p><p>市场需要成熟期，产品需要成熟期，用户也需要成熟期，一些被批评的体无完肤的产品，可能几年后就成为明星爆款，不说别的，当年大话西游不就是么。更早之前，周星驰龙套憋屈了多少年，做出证明自己的成果，是最令人信服的反击质疑和抨击的方式。</p><h2 id="Ch4-如何面对不公平"><a href="#Ch4-如何面对不公平" class="headerlink" title="Ch4. 如何面对不公平"></a>Ch4. 如何面对不公平</h2><h3 id="4-1-世界就没有公平"><a href="#4-1-世界就没有公平" class="headerlink" title="4.1 世界就没有公平"></a>4.1 世界就没有公平</h3><p><a href="https://mp.weixin.qq.com/s/Si_Hrk6GBP7uGbY3C-gOlA" target="_blank" rel="noopener">从校园到职场，很抱歉，世界并不按你的计划前进</a></p><p>你需要的是机会，和提升自己把握机会的能力，别人机会比你多，别人比你条件优越，没办法的，人从基因就开始不公平，投胎也不公平，你怎么办，就放弃自己重新投胎了？<br>最重要的是有没有自己向上，前进的机会，没有机会，再好的企业氛围，领导重视，公司环境，不要留恋。有很好的机会，那些噪音，可能的不公平，真的不用那么看重。</p><h3 id="4-2-确认自己的投入产出合理性"><a href="#4-2-确认自己的投入产出合理性" class="headerlink" title="4.2 确认自己的投入产出合理性"></a>4.2 确认自己的投入产出合理性</h3><p>你投入的时间，精力，资源，和你所获得的回报，从行业来说，从其他平台对比来说，这份回报是否合理，是否值得，值得，这就是很好的工作，很好的事情。你说某某某不如你比你回报高，这种心态要不得。如果你觉得不值得，你可以找到投入产出回报更高的平台和职位，那就转身离开，你说公司已经特殊照顾你了，这不重要。</p><h3 id="4-3-良好的沟通方式"><a href="#4-3-良好的沟通方式" class="headerlink" title="4.3 良好的沟通方式"></a>4.3 良好的沟通方式</h3><p>确实遭遇到职场不平，涉及维权，涉及解释，涉及赔偿，几个原则。<br>其实前面段落提过的，重述一下</p><p>第一，就事论事，切忌情绪化和人身攻击。否则对的也会变错。</p><p>第二，只列事实即可，不要臆测，不要假设，不要扣帽子。</p><p>第三，尽量留存足够的证据，如果真的没有证据，有些事也真的没办法追索。</p><p>那么这里多加一条，第四，一旦涉及维权相关，务必通过律师和第三方进行，尽量不要自己直接追索，维权尺度一定要听律师的，不要认为自己占理就过度维权。<br>这一条关键时刻是救命的。</p><h3 id="4-4-干净的离开"><a href="#4-4-干净的离开" class="headerlink" title="4.4 干净的离开"></a>4.4 干净的离开</h3><p>如果确实无法继续工作，希望换个环境，那我想说一点，干净的离开。<br>不要自作聪明的搞一些报复行为，不要做一些可能违反法律风险的事情，不要以为自己可以要挟东家或者可以通过某种手段逼对方就范。<br>中国现在的执法力度非常强大，而且，说实话，很多时候，你意气用事，对的也会变错，本来可以合法争取的权益，也会输得干干净净。<br>干净的离开，长期来说，会有很好的口碑，很多企业会做尽调，不干净的事情，就算一时得逞，你也瞒不了太久。江湖并不大，很多人总会在不同场合遇到，尽量不要树敌太多。</p><h2 id="Ch5-晋升的秘密"><a href="#Ch5-晋升的秘密" class="headerlink" title="Ch5. 晋升的秘密"></a>Ch5. 晋升的秘密</h2><p>领导是如何选择晋升的人选，是不是干活最多的那个，是不是能力最强的那个，很多时候，其实并不是，这一点，我希望读者能够理解，并不是因为谁谁会来事，会做人，而是你没有站在更高的角度看问题。</p><p><a href="https://henix.github.io/feeds/weixin.sogou.caozsay/2018-10-19-1000000334.html" target="_blank" rel="noopener">如何提拔骨干及挑选接班人</a></p><h3 id="5-1-团队的信任和支持"><a href="#5-1-团队的信任和支持" class="headerlink" title="5.1 团队的信任和支持"></a>5.1 团队的信任和支持</h3><p>提拔一个新的负责人。很多时候，要看整个团队是否信任和支持，这一条几乎是绝大部分企业晋升都会考虑的关键因素。包括外聘空降，也会考虑内部团队的人接受程度。</p><p>提拔起来的人底下不服气，不支持，是很麻烦的事情。<br>所以，平时人缘要好，为什么我说要多称赞别人，团队都信任你，支持你，这一点对晋升机会来说，尤为重要。<br>有些人能力很强，但性格不好，处处得罪人，那么怎么提拔？别说老板不给你机会，老板希望的是团队的稳定和可控。</p><h3 id="5-2-良好的汇报能力和沟通能力"><a href="#5-2-良好的汇报能力和沟通能力" class="headerlink" title="5.2 良好的汇报能力和沟通能力"></a>5.2 良好的汇报能力和沟通能力</h3><p>前面提到信任关系里，汇报能力很重要，那么沟通能力也很重要。</p><p>光闷头干活，不懂得及时汇报，或者什么破事小事都汇报，你让领导怎么用你，这种提拔起来，项目团队会失控的。</p><p>沟通能力也很重要，你可能团队里大家都很信服你，其他团队，其他部门，沟通少，经常互相不对付，老板也头大对不对，能不能协调资源，沟通不同团队的人员共同完成任务，既然要提拔你作为主管/经理，不能事事都靠上面的大老板，自己要担当这方面的事情对不对。<br>沟通还包括什么，如何培养新人，如何提升团队干劲，自己一个人吭哧吭哧加班干活，团队懒洋洋，新人不成长，你觉得做负责人合适么。</p><h3 id="5-3-具有向上管理的能力和思维方式"><a href="#5-3-具有向上管理的能力和思维方式" class="headerlink" title="5.3 具有向上管理的能力和思维方式"></a>5.3 具有向上管理的能力和思维方式</h3><p><a href="https://mp.weixin.qq.com/s/3kzCHGH1E9BXpT1TkS-xZw" target="_blank" rel="noopener">如何管理和指挥你的上司</a></p><p>什么叫向上管理，不能什么事情都等着上面分配，上面指挥，上面发现问题告诉你如何解决。要更主动，更积极一点，主动发现问题，主动承揽任务，主动寻求上司的支持和资源调配。</p><p>我以前也强调过，能把老板利用起来的才是好的项目负责人，老板有时候也是一手好牌，使不上劲懂不懂，老板的人脉资源，老板的社会影响力，如果你的项目足够好，让老板用他的资源配合你，老板开心还来不及。<br>当然，强调一下，向上管理是有前提的，信任关系，没有信任关系，老板不可能听你的。信任关系一定是基础，路要一步步走，饭要一口口吃。</p><h3 id="5-4-对产品-业务的理解具有全面性"><a href="#5-4-对产品-业务的理解具有全面性" class="headerlink" title="5.4 对产品, 业务的理解具有全面性"></a>5.4 对产品, 业务的理解具有全面性</h3><p>到达一定级别的时候，需要的不是你某个领域特定的能力，你需要站在一定高度看问题，所谓全局观，你需要对产品业务的逻辑具有完整的理解，因为你需要对很多关键行为，做出判断，什么是进一步优化的方向，什么是产品的阶段性目标，这时候，你不能只停留在可以把事情做好的地步。</p><p>不要急于上升到战略高度，但工作中做的每件事情，尽可能理解其背后的逻辑，来龙去脉，业务关系，商业途径。</p><p>以前我在百度的时候，做产品经理，我江湖经验多一点，百度很多研发都是那种，怎么说呢，刚毕业进百度，社会经验几乎是0，代码写的不错，但对所谓联盟流量获利的途径，个人草根站长和百度关系什么的，其实都是一知半解，甚至是没有感觉的。</p><p>这时候你会发现，有的人就好奇心很重，写程序看产品设计的时候，会多问一些为什么，会好奇背后的设计思路和逻辑是什么，我也好为人师，你来问，我就讲这些站长是怎么赚钱的，以及怎么薅百度羊毛的，所以我们的产品应该怎么设计，既要共赢，又要防止被薅对不对。</p><p>那么这些特别喜欢问，特别好奇的程序员，我都记着呢，后来发展的都特别好，跟着很厉害的人去创业，现在好几个这样的程序员身价都好几个亿了，比如多盟的CTO王鹏云，还有跟谁学的合伙人张怀亭，都是典型的例子，当年都是这么过来的。也有的就闷头做事，你让我干什么就干什么，懒得问，遇到问题就是你设计没写清楚。从代码能力来说，和前者有差距么？没什么差距的，但从职场发展来说，很容易就看到差距了。</p><h3 id="5-5-能把握关键问题-具有发现问题的能力"><a href="#5-5-能把握关键问题-具有发现问题的能力" class="headerlink" title="5.5 能把握关键问题, 具有发现问题的能力"></a>5.5 能把握关键问题, 具有发现问题的能力</h3><p>有的的人擅长解决问题，当然很好，但作为管理者，应该擅长发现问题。不要等服务器崩溃了才知道性能负载需要优化。不要等用户规模化流失了才知道产品体验需要改进，不要等无可挽回的时候才知道系统存在问题了。</p><p>要在出现苗头，或者有一些不好的迹象的时候，快速敏锐的发现问题，在还没有出现严重状况的时候，就把风险遏制住。</p><p>这对管理者来说，非常重要。发现问题，才能有效的分配任务，安排任务，确立目标。</p><p>管理者发现问题不一定完全靠自己，毕竟个人的能力和所获取的信息是有限的，要懂得如何收集信息，如何建立信息分析的网络，以及如何有效的甄别不同渠道的信息反馈。</p><p>所谓发现问题的能力，既包括个人的信息敏锐度，其实也包括一整套信息分析的方法体系。哪怕这套信息架构是前任领导建立的，至少你要能透彻领悟和接手。</p><p>很多时候，一些新上任的管理者，习惯呼啦啦的解决一堆遗留问题彰显自己的才能，却忽视了发现问题和分析问题的手段，对前任留下的信息渠道和网络不重视，甚至从不使用，结果直到出现严重问题的时候无法收场。</p><h3 id="5-6-信任度是关键项"><a href="#5-6-信任度是关键项" class="headerlink" title="5.6 信任度是关键项"></a>5.6 信任度是关键项</h3><p>其实前面一直都强调过了，首先要建立与上司和老板信任关系，才有以上其他，信任是需要证明的，如果没有证明自己值得信任，那就什么都不用提了。</p><p>信任是怎么确立的，件件有着落，事事有回声。还是那句话，有时候你参与一个项目，项目失败了，是不是你失败了？如果在项目中，你的工作表现很好，指派的任务完成得很到位，项目失败不等于你的失败，领导依然会让你肩负其他重任，这一点在很多巨头里你都能看到案例，很多内部失败项目出来的人，有的人会被争抢，有的人还会升职。关键要自己做到位。关于建立信任的章节，多仔细再看看。</p><h2 id="Ch6-企业永远不是家"><a href="#Ch6-企业永远不是家" class="headerlink" title="Ch6. 企业永远不是家"></a>Ch6. 企业永远不是家</h2><p><a href="https://mp.weixin.qq.com/s/Yxks9eEohmtHCmJFDX37pA" target="_blank" rel="noopener">谈谈企业福利</a></p><p>我们讲半天说如何让老板信任，如何获得团队的认可，但这里为什么要说这句呢。再好的老板，再好的团队，不是你的家庭，不是你的亲人。我希望读者务必明确这一点。</p><p>刘强东说，我们不会亏待和放弃任何一个兄弟。</p><p>刘强东又说，那些跟不上我们脚步的人，不是我们兄弟。</p><p>很简单，企业文化再吸引人，解释权不归你所有。</p><p>再者，任何企业都有持续维持的风险，哪怕老板特别好，真的人品没得挑，公司如果出现经营困难，老板也不可能变卖家产养你对不对。除非老板是你父母，另当别论。</p><h3 id="6-1-维持职场竞争力"><a href="#6-1-维持职场竞争力" class="headerlink" title="6.1 维持职场竞争力"></a>6.1 维持职场竞争力</h3><p><a href="https://mp.weixin.qq.com/s/qef3o4tygS2LR1AW56jcmA" target="_blank" rel="noopener">当你面临选择，所谓经验可能一文不值</a></p><p>除非你能做到财务自由，或者已经有足够的养活自己的手段。否则，务必要维系自己的职场竞争力，保持自己在职场上有足够的选择权，永远不要认为自己的职场路线会越来越上升，35岁以后，很多工作机会会骤然消失。</p><p>如何维系职场竞争力，第一要不断学习新东西，保持知识面和信息面不要受限。第二要建立业内影响力，能够被一些业内有资源的人所赏识认可。第三要多帮助有潜质的人，现在你帮助过的有潜力年轻人，可能未来成长壮大，遇到一些状况，没准会给你机会收留你。</p><h3 id="6-2-有好的机会要把握"><a href="#6-2-有好的机会要把握" class="headerlink" title="6.2 有好的机会要把握"></a>6.2 有好的机会要把握</h3><p>公司对我很好，老板对我很好，但从职场而言，你尽职尽责的工作，就是对得起他们，如果遇到更好的机会，能够上一个台阶，能够在职场地位，收入上有较大的进步，我的建议是，不要舍不得老板，舍不得同事，真的不要舍不得。</p><p>当然，如果非要抬杠说，有可能留在原公司未来回报更高呢，比如当年阿里不也一穷二白么？我解释一下，这是职场判断问题，如果你判断错了，那就是判断错了，这是另一个话题。但我要说的是，不要为了所谓情感，而失去更好的发展机会。</p><p>我见过有这样的朋友，为了报答老板的知遇之恩，想再干几年，有个好的结果再走，但是，再干几年，不好意思，35岁以上了，以前很好的机会，已经没有了。其实真的不值得，而且，很可能，对老板而言，你没有自己想象的那么重要。</p><h3 id="6-3-止损-止损-一定要止损"><a href="#6-3-止损-止损-一定要止损" class="headerlink" title="6.3 止损, 止损, 一定要止损"></a>6.3 止损, 止损, 一定要止损</h3><p>如果公司遇到较大的风险，工资无法发放，经营存在法律风险。<br>该走立即要走，不要说，现在走了拿不到什么什么，再过几个月没准如何如何。<br>止损务必要果断！</p><p>维权也是，适度维权，不要为了一点点维权利益，把自己的时间和精力都耗进去，你要明白你的前途比那些值钱。</p><h3 id="6-4-注意个人信用-不要被企业滥用"><a href="#6-4-注意个人信用-不要被企业滥用" class="headerlink" title="6.4 注意个人信用, 不要被企业滥用"></a>6.4 注意个人信用, 不要被企业滥用</h3><p>很多人已经犯了这样的错误，加入一家金融理财公司，为了完成业绩，为了更好地获得晋升机会，不遗余力的发展身边的亲朋好友购买相关产品，最后爆雷，之前的社交网络完全崩溃。</p><p>个人信用不要那么容易被企业滥用，不要为了几个月的奖金，一点点奖励，把个人信用和口碑都消耗掉，非常愚蠢的做法。</p><p>现在有些公司新员工入职要用身份证办信用卡，办电话卡，给公司业务用，这个那个的，我看着都觉得害怕，个人征信就这么不当回事么？就真的找不到工作了么？把自己当三和大神了么？</p><p>如果一个企业为了发展，不尊重个人信用，滥用员工个人信用，这种公司尽量脱身。</p><p>还有一种，明知公司快出问题，快要沉船，还出来撒谎安慰闹事的人，这种也很蠢，马上走人就对了，最多闭嘴不说话，这算是对得起老板了。这时候还要消耗个人信用，为了站好最后一班岗，还以为这是职场操守，你不想做反骨仔，你退出江湖行不行啊。</p><h3 id="6-5-再好的上司-老板-不要跟着一起沉船"><a href="#6-5-再好的上司-老板-不要跟着一起沉船" class="headerlink" title="6.5 再好的上司, 老板, 不要跟着一起沉船"></a>6.5 再好的上司, 老板, 不要跟着一起沉船</h3><p>如果一个企业存在经营风险，或者多年以来业务没有任何起色，不管上司，老板对你多么好，没必要陪着他们沉没。</p><p>我不会鼓励在职摸鱼，或者说那些违反职场道德和法律的事情，但从业者不要给自己加戏太多，真把企业当家一样，同生共死，那实在不值得。</p><p>不要认为自己是救世主，时间已经证明，你的忠诚拯救不了任何事情。</p><h3 id="6-6-忠诚度的体现是-在其位谋其事-而不是把命和前途都交给他们"><a href="#6-6-忠诚度的体现是-在其位谋其事-而不是把命和前途都交给他们" class="headerlink" title="6.6 忠诚度的体现是, 在其位谋其事, 而不是把命和前途都交给他们"></a>6.6 忠诚度的体现是, 在其位谋其事, 而不是把命和前途都交给他们</h3><p>在职的时候认真工作，全力投入，离职的时候遵守契约，这就是忠诚。不是把命和前途交给别人。记住，企业永远不是家，不要被一时的企业文化口号所蒙蔽，记住再好的企业文化，解释权不在你这里。</p><h2 id="Ch7-所谓副业"><a href="#Ch7-所谓副业" class="headerlink" title="Ch7. 所谓副业"></a>Ch7. 所谓副业</h2><p>很多人都关心副业话题，其实我旧文写过关于副业的文章，我的观点都在里面，今天不会展开太多。</p><p><a href="https://mp.weixin.qq.com/s/w8qCG-amQe6dm5yoY9jxbA" target="_blank" rel="noopener">你适合搞副业么？</a></p><h3 id="7-1-副业往往是职场忌讳"><a href="#7-1-副业往往是职场忌讳" class="headerlink" title="7.1 副业往往是职场忌讳"></a>7.1 副业往往是职场忌讳</h3><p><a href="https://mp.weixin.qq.com/s/S3T6V3pevI8cM2PU0DALJA" target="_blank" rel="noopener">程序员想搞点副业太难了：谷歌已将个人项目归属问题写进雇佣协议</a></p><p>大部分企业和管理者，会忌讳员工搞副业，如果你想在职场精进，我建议你不要投入太多精力和时间在副业上。</p><p>副业的禁忌其实非常多，竞业，职务侵占，内幕交易等，很容易碰雷，一旦遭遇法务追究，基本上能幸免的极少。</p><p>有的人觉得，我的副业和我的工作没关系，那你分心二用，而且没有办法利用你职场优势，你折腾啥呢？</p><p>昨天新闻里说，google也不是很允许个人业余研发当作副业。以及最近nginx创始人被抓的案例，真的不止是中国的公司不允许。</p><p>还有，要强调一句，职场的人会高估你副业的受益，哪怕你亏的一塌糊涂，人家也会认为你赚的很多，更不用说会把你所有工作的过失都归咎于你在副业，这种情况下，别人会心理不平衡，你会失去团队的信任，失去领导的信任，失去同事的支持，也就失去晋升的机会，哪怕你什么都没做错。</p><h3 id="7-2-投资行为相对宽容-但有告知义务"><a href="#7-2-投资行为相对宽容-但有告知义务" class="headerlink" title="7.2 投资行为相对宽容, 但有告知义务"></a>7.2 投资行为相对宽容, 但有告知义务</h3><p>如果对外有投资项目，相对来说，一些企业会宽松一些，毕竟你没有占用工作的时间和精力，但仍然有告知义务，并且在公司内部也有一些避嫌的考量，比如你投资的项目，恰好是公司的重要供货商和合作伙伴，这其实是非常尴尬的，有的公司是坚决禁止的，有的是你需要避嫌，不参与该供货商选择的任何决策讨论，但很多事是说不清的。</p><p>实际上，很多巨头的高管和中层在外面都有投资项目，也不算是完全的禁忌，只是规避自己职权获利这块注意就行。所以告知是非常重要的，你告知了，而没有规避，责任也容易分担，你没有告知，就很难说了。</p><p>还有，告知要留证据，不是走过去说一声叫告知，正式写封邮件抄送有关负责人，我在外面有参与某某项目投资，目前该项目与公司有合作洽谈，申请回避。日后追究起来，这封邮件能救命。</p><p>做基金的LP基本上没有任何风险，因为LP不参与决策，所以一般不需要忌讳。但实话说，有些巨头的高管，名义上是外面基金的LP，骨子里做的是GP的事情，这种事，只要大老板不认为有问题，也不会有问题。</p><p>其实很多公司的潜规则是，你投资的项目不去跟竞争对手合作就行。但并不是每个公司都是这么宽容的。</p><h3 id="7-3-企业的敏感度和容忍度"><a href="#7-3-企业的敏感度和容忍度" class="headerlink" title="7.3 企业的敏感度和容忍度"></a>7.3 企业的敏感度和容忍度</h3><p>不同的企业敏感度和容忍度不同，还是前面提到的，有的企业会特别在意你的副业和竞争对手的合作关系，但不在意和自己公司的合作关系。有的敏感度就很高，容忍度很低，这种也不会被允许。</p><p>还有就是职位的容忍度，有些高管可以做的副业，基层是不行的，高管和大老板有信任基础，大老板觉得你不会薅企业的羊毛，就算薅一点，相对于历史贡献，也不会太在意。但基层就不一样了，没有信任基础，那就默认认为你是有问题的。</p><h3 id="7-4-风险性偏好和个人能力资源判断"><a href="#7-4-风险性偏好和个人能力资源判断" class="headerlink" title="7.4 风险性偏好和个人能力资源判断"></a>7.4 风险性偏好和个人能力资源判断</h3><p>网上绝大部分教你副业赚钱的课程和内容都是靠这个话题赚你的钱的，鉴于分辨能力，我建议你一个都不要信。所谓开连锁店，投资什么项目可以坐地收钱，基本没可能。真赚钱的也都是各种精打细算，累的要死，各种踩坑学习总结出来的，没有躺赚的。</p><p>写文章做自媒体赚钱，我旧文不断强调，可能性不是没有，极低极低。不要总问为什么写了那么久涨不了粉，涨不了是正常的。你写不过半佛仙人的，我都写不过的。</p><p>做影响力，做分享，价值是有的，我一直强调的是，提升业内影响力，一个月写一篇就好，让业内的人看到就好，只要写的够好，几百个人看到也是有价值的，不是靠这个赚钱，是靠这个让你获得更多的业内认可。同时锻炼你表达和总结的能力。</p><p>坦白说，我看不出有快速复制的适合所有人做副业的项目，你说抖音好不好，快手好不好，公众号好不好，或者这个那个好不好，因人而异，可能极少数人可以成，不具备广泛的复制性。</p><p>先看看你自己能力在哪里，资源在哪里，你对风险的承担力是多少，以及如何正确的评估风险和机会。</p><p><a href="https://mp.weixin.qq.com/s/4RBVMIf2JaAcYkM76aU8sQ" target="_blank" rel="noopener">影响力阶级</a></p><p>任何投资行为，我建议你做好交学费的心理准备。<br>其实我也交过不少学费了，我觉得验证一些事情，或者一些人，也不是不可以，关键是，这个学费我交得起才行。</p><h2 id="Ch8-永远不要自作聪明"><a href="#Ch8-永远不要自作聪明" class="headerlink" title="Ch8. 永远不要自作聪明"></a>Ch8. 永远不要自作聪明</h2><h3 id="8-1-诚实具有持续复利"><a href="#8-1-诚实具有持续复利" class="headerlink" title="8.1 诚实具有持续复利"></a>8.1 诚实具有持续复利</h3><p>很多年轻人会在职场耍小聪明，以为撒点小谎，推卸一下责任，领导不会察觉，其实职场上司很多是老江湖，阅人无数，你的那点伎俩根本逃不过人家眼光，就算一时逃得过，稍微过一段时间，很容易穿帮。</p><p>很多时候，上司和领导真的不会揭穿你，职场上并不是非要绝对正确，有时候看穿不说穿，留点面子给你，但会默默在心理给你打个标签，而你自己还不知道。</p><p>诚实是有复利的，坚持下来你才会知道。</p><h3 id="8-2-不要轻易否定别人"><a href="#8-2-不要轻易否定别人" class="headerlink" title="8.2 不要轻易否定别人"></a>8.2 不要轻易否定别人</h3><p>批评别人很容易，但实际上很多人容易忽视别人的优点，相互尊重是职场生存法则之一，而很多背景还不错的年轻人会有一种天然优越感，学校里惯出来的臭毛病，自以为自己很厉害，自以为职场的人毛病很多。</p><p>比如很多历史遗留问题，自己没有去了解，不知道来龙去脉，批评别人代码不规范，很多逻辑不清晰，其实当时解决的问题场景，所面临的复杂局面，自己根本不知道，人家所用到的技巧和思路，根本没领悟。上去自以为是的调整，很容易闯下大祸。</p><p>还有就是自己加戏的那种，总觉得别人是针对你，是歧视你，是如何的瞧不起你，甚至把别人试图保护你，试图栽培你的苦心当作是恶意，这种情况也挺常见的。</p><p>很多时候，很多年轻人在职场树敌，是自找的，而自己还不知道原委，自己一上来就把别人否定，把别人当敌人，那么人家也不笨，感受到你的恶意，自然会把你当敌人。</p><h3 id="8-3-尽量不要当众指责批评"><a href="#8-3-尽量不要当众指责批评" class="headerlink" title="8.3 尽量不要当众指责批评"></a>8.3 尽量不要当众指责批评</h3><p>有不同意见和不同观点，对对方的安排和决策不满意，可以提么，可以提，但尽可能私下提，一对一提出，如果想留存证据，写一封邮件，不要抄送无关的第三人，然后就事论事，注意态度，不要上纲上线，不要人身攻击。</p><p>除非是非常严重的人品道德问题或者迫不及待要指出的紧急问题，否则尽量留一点空间给别人。</p><h3 id="8-4-不要以己之长评人之短-尊重不同领域的专长"><a href="#8-4-不要以己之长评人之短-尊重不同领域的专长" class="headerlink" title="8.4 不要以己之长评人之短, 尊重不同领域的专长"></a>8.4 不要以己之长评人之短, 尊重不同领域的专长</h3><p>互相尊重非常重要，如果总是用自己的优点去对比别人，你总是比别人优秀，但别人也有比你强的地方。学会互相尊重，学会互相学习，这一点对个人职场成长和人际关系网络都非常重要。<br>要善于发现和挖掘别人的优点，并给予足够的肯定和鼓励。</p><h3 id="8-5-学会感恩和正向回馈"><a href="#8-5-学会感恩和正向回馈" class="headerlink" title="8.5 学会感恩和正向回馈"></a>8.5 学会感恩和正向回馈</h3><p>得到别人的帮助，一定要表达感谢，不是说一定要给与足够或等额的回馈，但必须有这个表达的过程，并给与正向回馈。不要以为别人帮你是理所当然的，哪怕对方是迫于工作任务，不情愿的帮你，也要表达感谢。</p><p>我常说的，你微信上请教别人一个问题，也是要给个红包回馈的。也许这个问题超级值钱，远远大于红包的价值，但给一个大红包，毕竟是一种心意。</p><p><a href="https://mp.weixin.qq.com/s/hsjh6RLTboMYpEetWwb4AQ" target="_blank" rel="noopener">感恩，不只是一种美德</a></p><h3 id="8-6-学会站在不同立场的思维方式"><a href="#8-6-学会站在不同立场的思维方式" class="headerlink" title="8.6 学会站在不同立场的思维方式"></a>8.6 学会站在不同立场的思维方式</h3><p>不要总是站在自己的立场评判他人，每个人在不同的立场，会有不同的判断方式，我前面提到了很多，为什么上司，领导在看待一些人的时候，和我们想象的不一样，你站在他的位置的时候，你就会完全明白了。但今天你没机会站在那里，你也能理解，你的格局和视野就真的厉害了。</p><p>站在管理者的立场，你才能理解晋升的关键是什么。</p><p>站在老板的立场，你才能理解工作的价值是什么。</p><p>要尽可能站在自己更上一级的立场思考问题，你才能更好的理解你当前工作的意义和价值。</p><h3 id="8-7-不要遮掩问题-要学会认错"><a href="#8-7-不要遮掩问题-要学会认错" class="headerlink" title="8.7 不要遮掩问题, 要学会认错"></a>8.7 不要遮掩问题, 要学会认错</h3><p><a href="https://mp.weixin.qq.com/s/SQDCbmseIQ-4PQrpzW3SAg" target="_blank" rel="noopener">年轻人，如何抗造系列之 - 做好自己，留有空间</a></p><p>遮掩问题，推卸责任往往是很拙劣的一种自作聪明，也是年轻人最容易犯得职场错误。<br>承认错误不丢人，对于大部分企业和领导来说，其实年轻人犯错是被允许的，是培养计划中的一部分。而对错误的反思，复盘，下一步的调整计划，更能体现出你的价值和能力。</p><p>遮掩问题，用更多的谎言去掩盖谎言，很容易穿帮，记住，你不是韦小宝，就算是韦小宝最后也会穿帮。</p><h2 id="关于不同领域的职场竞争力"><a href="#关于不同领域的职场竞争力" class="headerlink" title="关于不同领域的职场竞争力"></a>关于不同领域的职场竞争力</h2><p>不同领域，不同行业，可能职场有较大的差距，我不能说我分享的逻辑，一定可以通用所有领域和行业，或者所有企业，我只能说，这代表了我认为较为通用的职场环境，但这里有两个比较大的分支领域，其一，是所谓充分市场竞争领域；其二，是所谓垄断行业；这两个领域的职场，关于升职加薪的重点，是完全不同的。</p><p>怎么思考这个问题呢，在充分市场竞争领域，你的职场竞争力是最重要的，什么是竞争力，就是你的能力和价值，一定会被同行中的某个公司所认可，所需要，这时候你谈领导是否赏识你，老板是否够大方，根本不重要，重要的是你要建立业内影响力，让更多同行老板知道你的能力，这时候就可以待价而沽。</p><p>在垄断领域，所谓职场竞争力就没那么重要了，家庭背景资源更重要，那如果没有怎么办，如何建立信任度就很重要，你必须获得领导和上司的充分信任，才有机会。</p><p><a href="https://mp.weixin.qq.com/s/BtFfOFY9kPElmnBrwAI6vw" target="_blank" rel="noopener">从校园到职场-如何自我估值</a></p><p>有人问问题，说银行利润这么高，为什么基层工资水平并不高，这个问题很可笑，银行是典型的垄断行业啊！虽然银行间也存在竞争，那是什么竞争，资源的竞争，人脉关系的竞争，你的竞争力在哪里，你说你代码写的好，不重要！那么信任关系如何建立，就是你需要思考的重点了。</p><p>市场竞争才会提升优质人才的身价，这其实是一个很简单的道理，互联网行业的高薪酬来自于残酷的市场竞争，很多人总是想不明白。以为去了利润高的垄断机构可以躺着拿高薪，凭什么啊，先问问你爹是谁？</p><h2 id="提升职场容错性"><a href="#提升职场容错性" class="headerlink" title="提升职场容错性"></a>提升职场容错性</h2><p>就是说呢，你要坚持做一些正确的事情，正确的选择，但要允许自己的领导，上司，不那么正确。</p><p>就具体企业，具体职位而言，可能做出了正确的选择，未必得到合理的回报，这是很常见的，世界并不是按照我们的计划前进。</p><p>但职场是个长期的事情，坚持正确的做法，相信时间的裁决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录曹大 caoz 2019 年度分享 – 职场真相&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Ch1-关于面试&quot;&gt;&lt;a href=&quot;#Ch1-关于面试&quot; class=&quot;headerlink&quot; title=&quot;Ch1. 关于面试&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Daily" scheme="http://swxu.github.io/categories/Daily/"/>
    
    
      <category term="职场" scheme="http://swxu.github.io/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Git配置</title>
    <link href="http://swxu.github.io/2020/04/03/Git%E9%85%8D%E7%BD%AE/"/>
    <id>http://swxu.github.io/2020/04/03/Git%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-03T04:29:40.000Z</published>
    <updated>2020-12-11T04:46:57.682Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git toturial</a></li><li><a href="https://github.com/arslanbilal/git-cheat-sheet" target="_blank" rel="noopener">Git Cheat Sheet</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># .gitconfig 文件</span><br><span class="line">[user]</span><br><span class="line">name &#x3D; shengweixu</span><br><span class="line">email &#x3D; shengweixu@outlook.com</span><br><span class="line">#[http]</span><br><span class="line">#proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line">#[https]</span><br><span class="line">#proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line">[color]</span><br><span class="line">ui &#x3D; true</span><br><span class="line">[alias]</span><br><span class="line">st &#x3D; status</span><br><span class="line">co &#x3D; checkout</span><br><span class="line">ci &#x3D; commit</span><br><span class="line">br &#x3D; branch</span><br><span class="line">unstage &#x3D; reset HEAD</span><br><span class="line">lg &#x3D; log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git toturial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://swxu.github.io/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://swxu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>about</title>
    <link href="http://swxu.github.io/2020/04/03/about/"/>
    <id>http://swxu.github.io/2020/04/03/about/</id>
    <published>2020-04-02T17:43:39.000Z</published>
    <updated>2020-12-11T06:51:52.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个即将步入社会的研究生<br>Email: <a href="mailto:shengweixu@outlook.com">shengweixu@outlook.com</a><br>WeChat: swxu24<br>QQ: 1093790349<br>友情链接: <a href="https://github.com/swxu" target="_blank" rel="noopener">Github</a> <a href="https://www.cnblogs.com/swxu/" target="_blank" rel="noopener">博客园</a></p></blockquote><img src="../../../../images/2020/04/03/avatar.jpg" alt="avatar" width="300" style="border-radius:50%"/>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一个即将步入社会的研究生&lt;br&gt;Email: &lt;a href=&quot;mailto:shengweixu@outlook.com&quot;&gt;shengweixu@outlook.com&lt;/a&gt;&lt;br&gt;WeChat: swxu24&lt;br&gt;QQ: 109379034
      
    
    </summary>
    
    
      <category term="Daily" scheme="http://swxu.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="http://swxu.github.io/2020/04/02/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://swxu.github.io/2020/04/02/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-02T14:54:37.000Z</published>
    <updated>2020-12-11T04:46:13.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装部件"><a href="#安装部件" class="headerlink" title="安装部件"></a>安装部件</h2><ol><li>git</li><li>node.js<ul><li>安装国内源 (可跳过, 下面步骤中的 <code>cnpm</code> 换成 <code>npm</code>)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>安装 hexo<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>安装 deployer 插件, 在 <code>hexo deploy</code> 之后自动 <code>push</code> 到 github 仓库<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li>创建博客文件夹并初始化<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir HexoBlog &amp;&amp; cd HexoBlog/ &amp;&amp; sudo hexo init</span><br></pre></td></tr></table></figure></li><li>修改 _config.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在文件的最后</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/swxu/swxu.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li><code>hexo new &quot;文章题目&quot;</code> 创建博客</li><li><code>hexo server</code> 可以在本地预览</li><li><code>hexo deploy</code> 通过之前安装的插件直接部署到 github</li><li><code>hexo help</code> 查看 hexo 的其他命令</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><blockquote><p><a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">Ayer 的 Github 主页</a></p></blockquote><ol><li>把主题 clone 到 themes 文件夹下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure></li><li>修改 _config.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure></li><li>其他修改参考 <a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">Ayer</a> 的说明</li></ol><blockquote><p>参考 <a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">CodeSheep 视频</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装部件&quot;&gt;&lt;a href=&quot;#安装部件&quot; class=&quot;headerlink&quot; title=&quot;安装部件&quot;&gt;&lt;/a&gt;安装部件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;node.js&lt;ul&gt;
&lt;li&gt;安装国内源 (可跳过, 下面步骤中的 &lt;code&gt;cn
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://swxu.github.io/categories/Tools/"/>
    
    
      <category term="Hexo" scheme="http://swxu.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
